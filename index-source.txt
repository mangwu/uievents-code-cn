<link href="./override.css" rel="stylesheet" />
<script defer src="./custom-script.js"></script>

<pre class="metadata">
Title: 用户界面事件键盘事件 code 属性值(UI Events KeyboardEvent code Values)
Shortname: uievents-code-cn
Level: none
Group: webapps
Status: UD
ED: 
Repository: mangwu/uievents-code-cn
Boilerplate: repository-issue-tracking off, copyright off, property-index off
No Editor: true
Text Macro: DATE 2023年5月6日
Text Macro: LONGSTATUS 翻译草案
!本版本: <a href="https://mangwu.github.io/uievents-code-cn/">https://mangwu.github.io/uievents-code-cn/</a>
!最新提案: <a href="https://w3c.github.io/uievents-code/">https://w3c.github.io/uievents-code/</a>
!上个版本: <a href="http://www.w3.org/TR/2015/WD-uievents-code-20151215/">http://www.w3.org/TR/2015/WD-uievents-code-20151215/</a>
!历史记录: <a href="https://www.w3.org/standards/history/uievents-code">https://www.w3.org/standards/history/uievents-code</a>
!规范反馈: <a href="https://github.com/w3c/uievents-code/issues/">GitHub-w3c-uievents-code-issues</a>
!翻译反馈: <a href="https://github.com/mangwu/uievents-code-cn/issues/">GitHub-mangwu-uievents-code-cn-issues</a>
!编辑者: 
	<a class="p-name fn u-email email" href="mailto:garykac@google.com">Gary Kacmarcik</a>(Google)
	<a class="p-name fn u-email email" href="mailto:travil@microsoft.com">Travis Leithead</a>(Microsoft)
!翻译者: 
	<a class="p-name fn u-email email" href="mailto:1185956753@qq.com">mangwu</a>
Abstract:
	<h2 class="no-num no-toc no-ref heading settled" id="abstract-cn">
	<span class="content">摘要</span>
	</h2>
		<p>
		本规范定义了 KeyboardEvent.code 属性的值，并且是用户界面事件规范的一部分 
		[[UIEvents]] 。 <code>code</code> 值包含有关按键事件的信息，
		可用于识别用户按下的物理按键。
		</p>

	<h2 class="no-num no-toc no-ref heading settled" id="sotd-cn">
	<span class="content">文档状态</span>
	</h2>
	<div data-fill-with="status-cn">
		<p><em>
		本节介绍了本文件发布时的状态。
		当前 <abbr title="World Wide Web Consortium">W3C</abbr> 
		出版物列表和本技术报告的最新修订版可在
		<a href="https://www.w3.org/TR/">
		<abbr title="World Wide Web Consortium">W3C</abbr> 技术报告索引
		</a>
		中找到，网址为 https://www.w3.org/TR/ 。
		</em></p>

		<p> 本文件由
		<a href="https://www.w3.org/groups/wg/webapps">网络应用程序工作组</a>
		作为 <strong>编辑草稿</strong> (Editors Draft)发布。 
		<span class="del-content">本文档旨在成为W3C推荐标准</span> 。
		</p>

		<p></p>

		<p> 本文件由
		<a href="https://www.w3.org/groups/wg/webapps">网络应用程序工作组</a>
		作为 <strong>工作草案</strong> (Working Draft)发布。
		欢迎对本规范提出反馈和意见。请使用
		<a href="https://github.com/w3c/uievents-code/issues">GitHub issues</a>
		对源文档进行问题讨论; 请使用
		<a href="https://github.com/mangwu/uievents-code-cn/issues">GitHub issues</a>
		对翻译文档进行问题讨论; 
		官方的问题存档地址为
		<a href="https://lists.w3.org/Archives/Public/public-webapps/">
		public-webapps@w3.org archives
		</a> 。
		</p>

		<p>
		作为编辑草案出版并不意味着
		<abbr title="World Wide Web Consortium">W3C</abbr>
		及其成员的认可。 
		这是一份草案文档，可以随时被其他文档更新、替换或作废。
		本文档不适合被其它正在编写的规范作为引用。
		</p>

		<p> 本文档由一个根据
		<a href="https://www.w3.org/Consortium/Patent-Policy-20200915/">
		<abbr title="World Wide Web Consortium">W3C</abbr> 专利政策</a>
		运作的小组编写。
		<abbr title="World Wide Web Consortium">W3C</abbr>
		保留了一份与该小组可交付成果相关的
		<a href="https://www.w3.org/2004/01/pp-impl/114929/status" rel="disclosure">
		所有可披露专利的公开列表
		</a> ; 该页面还包括公开一份专利的说明。
		对认为包含
		<a 
		href=
		"https://www.w3.org/Consortium/Patent-Policy-20200915/#def-essential">
		基本权利要求
		</a>
		（Essential Claim(s)）的专利有实际了解的个人必须根据
		<a
		href=
		"https://www.w3.org/Consortium/Patent-Policy-20200915/#sec-Disclosure">
		<abbr title="World Wide Web Consortium">W3C</abbr>专利政策第6节
		</a> 
		公开信息。
		</p>

		<p>本文件受
		<a href="https://www.w3.org/2021/Process-20211102/" id="w3c_process_revision-cn">
		2021 11月2日 W3C处理文档</a> 规范管理。
		</p>
  </div>
</pre>

<pre class="biblio">
{
	"ISO9995-1": {
		"href": "http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51645",
		"title": "ISO/IEC 9995-1:2009 Information technology -- Keyboard layouts for text and office systems -- Part 1: General principles governing keyboard layouts",
		"publisher": "ISO"
	},
	"ISO9995-8": {
		"href": "http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51641",
		"title": "ISO/IEC 9995-8:2009 Information technology -- Keyboard layouts for text and office systems -- Part 8: Allocation of letters to the keys of a numeric keypad",
		"publisher": "ISO"
	},
	"USB-HID": {
		"href": "http://www.usb.org/developers/hidpage/Hut1_12v2.pdf",
		"title": "USB HID Usage Tables 1.12",
		"publisher": "USB Implementers' Forum"
	}
}
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/uievents/#interface-; type: interface; spec: uievents;
	text: KeyboardEvent
urlPrefix: https://www.w3.org/TR/uievents/#dom-keyboardevent-; type: attribute; for: KeyboardEvent; spec: uievents;
	text: key
	text: code
	text: location
url: https://www.w3.org/TR/uievents/#key-legends; type: dfn; spec: uievents-key;
	text: key cap
url: https://www.w3.org/TR/uievents-key/#key-value-tables; type: dfn; spec: uievents-key;
	text: key attribute value
</pre>

<pre class="include">
path: stylesheet-extra.include
</pre>

<h2 id="introduction">简介</h2>

	本文档概述了各种键盘布局，并指定了每个键应使用的 {{KeyboardEvent/code}} 值。
	与 [[UIEvents key]] 中描述的 {{KeyboardEvent/key}} 值不同， 
	{{KeyboardEvent/code}} 值仅基于键在键盘上的物理位置，
	不会因用户的当前区域设置而变化。

	此规范以前的规范标题为 <em>DOM Level 3 {{KeyboardEvent/code}} Values</em> 。

	<h3 id="style-conventions">格式规约</h3>

		本规范遵循以下规约: 

		* 打印在 <a href="https://mangwu.github.io/uievents-cn/#key-legends">
			<em>键帽</em></a> 上的键显示为 KEYCAP{&darr;}， KEYCAP{=} 或 KEYCAP{Q} 。
			这用于从用户的角度引用键，而不考虑生成的 {{KeyboardEvent}} 事件中的 
			{{KeyboardEvent/key}} (键) 和 {{KeyboardEvent/code}} (键码)。

		* 代表字符的字形(Glyphs)显示为: GLYPH{&#x239C2;}。

		* Unicode 代码点( [=code points=] ) 显示为: UNI{U+003D}.

		* 有效的键属性值( [=key attribute values=] )，即 {{KeyboardEvent/key}} 
			属性值显示为: KEY{ArrowDown}, KEY_NOLINK{=}, KEY_NOLINK{q} 或 
			KEY_NOLINK{Q}。

		* 有效的键值属性值( [=key code attribute values=] )，即 
			{{KeyboardEvent/code}} 属性值显示为: CODE{ArrowDown}, CODE{Equal} 或 
			CODE{KeyQ}。
		
		<p class="note custom-note">
		在 <a href="https://mangwu.github.io/uievents-cn/#style-conventions">
		UIEvents</a> 规范本体的格式规约中，也对键帽，字符，代码点和键，
		键值的属性值进行了说明，但是渲染显示不一样，本规范中的渲染会更显眼。
		</p>

<h2 id="keyboard-layout">键盘布局</h2>

	<em>本节不是规范的。</em>

	字母数字键盘是用户生成键盘事件的最常见方式。本节概述了标准键盘及其物理布局。

	<p class="note custom-note">
	<q>键盘布局(keyboard layout)是指以按键、或键上图例来表示任何特定之机械、
	视觉或功能的键盘布局方式; 或则是在计算机、
	打字机或其它字体排版键盘等之类似设备、
	以其键之关系含义结构在键盘上表现的布局方式</q> —— 
	<a href="https://zh.wikipedia.org/wiki/%E9%94%AE%E7%9B%98%E5%B8%83%E5%B1%80">
	zh.wikipedia.org
	</a> 
	</p>

	<h3 id="keyboard-common-layouts">标准键盘布局</h3>

		本节介绍了常见键盘上的物理布局。

		<h4 id="keyboard-sections">键盘分区</h4>

			在讨论键盘布局时，将标准键盘划分为不同的区域并标记每一行会更方便讨论布局。

			<div class="figure-change"  data-content="images/keyboard-sections">
			<div class="custom-tabs-nav-wrap">
					<div class="custom-tabs-nav-list">
							<div data-node-key="1" class="custom-tabs-tab custom-tabs-tab-active">
									<div class="custom-tabs-tab-btn" tabindex="0">汉化图</div>
							</div>
							<div data-node-key="2" class="custom-tabs-tab">
									<div class="custom-tabs-tab-btn" tabindex="0">原图</div>
							</div>
					</div>
			</div>
			<figure id="figure-keyboard-sections-zh">
				<img src="images/keyboard-sections-zh.svg" width="684" height="225"
					alt="标准键盘的五个通用区域" />
				<figcaption>标准键盘的五个通用区域</figcaption>
			</figure>
			<figure id="figure-keyboard-sections" class="figure-hidden">
				<img src="images/keyboard-sections.svg" width="684" height="225"
					alt="标准键盘的五个通用区域" />
				<figcaption>标准键盘的五个通用区域</figcaption>
			</figure>
			</div>

			<p class="note custom-note">
			注意，如果包括功能相同的按键(如 KEYCAP{ControlLeft} 和 
			KEYCAP{ControlRight} )，上图共有 <code>104</code> 个物理按键。
			</p>

			这些键盘区域包括:

			*	字母数字区域( [=alphanumeric section=] )是键盘的主要部分，
				也是大多数键盘变化发生的地方。当用户选择一种键盘布局时，
				受影响最大的是此区域中的物理按键。
			*	控制板( [=control pad=] )区域和箭头板( [=arrow pad=] 
				)区域包含箭头按键和其他编辑按键。
			*	小键盘( [=numpad=] ，也称为"数字小键盘( [=keypad=] )"或"数字键盘")区域
				包含数字和数学按键键，使输入数字数据更容易。
			*	最后，功能区域( [=function section=] )包含各种功能按键( 
				[=function keys=] )和特殊按键，如 KEYCAP{Escape} 。

			为了更容易识别按键，键盘上的行的名称从最下面一行的 "A" 开始，
			到最上面一排的 "E" 。功能区域( [=function section=] )中的键行被认为在 
			"K" 行中。这些行名称与 [[ISO9995-1]] 规范中给出的行名称一致。

			请注意，许多键盘(包括现代键盘和传统键盘)都有多余的键，
			这些键没有整齐地放入上面的区域。其中一些键包含在[[#key-media]]。

		<h4 id="keyboard-101">标准 "101" 键盘布局</h4>

			标准的 "101" 键盘(通常称为"US 布局")是唯一一种在单行 KEYCAP{Enter} 
			(字面数字区域上的 KEYCAP{Enter} )键上方有 CODE{Backslash} 键(键帽标签为 
			KEYCAP{\|})的布局。所有其他布局都省略了此键，并展开 KEYCAP{Enter} 
			键以占据两行。

			<figure id="figure-keyboard-101-us">
				<img src="images/keyboard-101-us.svg" width="684" height="225" 
				alt="标准 '101' 键盘布局" />
				<figcaption>标准 "101" 键盘布局，展示未修改过的美式按键值</figcaption>
			</figure>

			现代标准的 "101" 布局键盘实际上包含 104 个键: 字母数字区域( 
			[=alphanumeric section=] )有 61 个按键，小键盘( [=numpad=] ) 、控制板
			( [=control pad=] )和箭头板( [=arrow pad=]) 和功能区域( 
			[=function section=] )有 43 个键。这个键盘布局的 "101" 
			名称可以追溯到这个标准键盘实际上包含 101 个键的时候。两个 KEYCAP{Meta} 
			按键(通常被赋予为特定于操作系统的标签)和 KEYCAP{Menu} 键是后来被添加，
			使按键总数达到了 104 个。

			<p class="note custom-note">
			左边的 KEYCAP{Meta} 按键的键帽标签通常有两种，一种是微软的 Windows 
			操作系统的 KEYCAP{⊞} ( KEYCAP{Windows} )，一种是苹果操作系统的 
			KEYCAP{⌘} ( KEYCAP{Command} )。现代键盘上的 KEYCAP{Menu} 
			键的键帽标签通常为 KEYCAP{≣} 。
			</p>

		<h4 id="keyboard-101alt">备用 "101" 键盘布局</h4>

			备用 "101" 键盘有一个大的 KEYCAP{Enter} 键，并缩小了 KEYCAP{Backspace} 
			键，为 CODE{IntlYen} 键腾出空间(它取代了标准 101 键盘布局中的 
			CODE{Backslash} 键)。 CODE{IntlYen} 名称来自日式键盘布局，表示 
			KEYCAP{¥} (也就是日元 PHONETIC{yen} 的符号)键——同样，
			俄式键盘布局和日式键盘布局类似，只不过这个 KEYCAP{¥} 键，映射了 
			KEYCAP{\/} 键，如下图像所示: 

			<figure id="figure-keyboard-101-russian">
				<img src="images/keyboard-101-russian.svg" width="684" height="225" 
				alt="备用 '101' 键盘布局" />
				<figcaption>
				备用 "101" 键盘布局，展示未修改过的俄式按键值
				</figcaption>
			</figure>

			现代的备用 "101" 布局的键盘包含104个键: 字母数字区域( 
			[=alphanumeric section=] )有61个按键，小键盘( [=numpad=] ) 、控制板
			( [=control pad=] )和箭头板( [=arrow pad=]) 和功能区域( 
			[=function section=] )有 43 个键。
			
			<p class="note custom-note">
			<a href=
			"https://zh.wikipedia.org/wiki/%E9%94%AE%E7%9B%98%E5%B8%83%E5%B1%80">
			维基百科</a> 上有关于日文假名键盘和韩文键盘的字母数字区域( 
			[=alphanumeric section=] )的图示，但是它们不属于备用 "101" 
			键盘布局，因为除了和俄式键盘一样多了一个 CODE{IntlYen} 键之外，
			修饰符按键还有区别，继续阅读下面的章节了解更多。
			</p>

		<h4 id="keyboard-102">标准 "102" 键盘布局</h4>

			标准的 "102" 键盘在整个欧洲都很常见，它在 "101" 
			键盘布局中添加了一个不存在的键: 在左移键( KEYCAP{Shift} )旁边添加了 
			CODE{IntlBackslash} 键(在英式键盘上键帽标签为 KEYCAP{\|} )。

			还添加了第二个键(在英式键盘上键帽标签为 KEYCAP{#~} )，该键部分藏在 
			KEYCAP{Enter} 键下。该键被编码为 CODE{Backslash} ，使用与 "101" 
			键盘布局中的 KEYCAP{\|} 键相同的编码。根据 [[USB-HID]] 规范，美式的 
			KEYCAP{\|} 和英式的  KEYCAP{#~} 实际上是两个独立的键(分别命名为"键盘 
			\ 和 |"以及"键盘非美式的 # 和 ~”），
			但由于这两个键从未同时出现在同一键盘上，大多数平台对两个键使用相同的扫描码
			(scancode)，因此很难区分。正是由于这个原因，这两个键都使用了码值 
			CODE{Backslash} 。

			<figure id="figure-keyboard-102-uk">
				<img src="images/keyboard-102-uk.svg" width="684" height="225" 
				alt="标准 '102' 键盘布局" />
				<figcaption>标准 "102" 键盘布局，展示未修改过的英式按键值</figcaption>
			</figure>

			现代 "102"布局的键盘包含105个键：字母数字区域( 
			[=alphanumeric section=] )有62个按键，小键盘( [=numpad=] ) 、控制板
			( [=control pad=] )和箭头板( [=arrow pad=]) 和功能区域( 
			[=function section=] )有 43 个键。

			<p class="note custom-note">
			按照 <code>code</code> 属性值进行区分，美式 "101" 键盘布局在占用单行 
			KEYCAP{Enter} 上方的 KEYCAP{\|} 键，和 英式 "102" 键盘布局在占用双行的 
			KEYCAP{Enter} 下方的 KEYCAP{#~} 键实际上指代同一个 <code>code</code> 值，
			即 CODE{Backslash}。英式 "102" 多出来的那个位于 KEYCAP{ShiftLeft} 和 
			KEYCAP{Z} 之间的按键，虽然键帽是 KEYCAP{\|} (和美式的占用单行 
			KEYCAP{Enter} 上方的 KEYCAP{\|} 键键帽相同)，但是 <code>code</code> 
			属性值却是 CODE{IntlBackslash} 。<br/>
			上述图示中的 KEYCAP{#~} 按键和 KEYCAP{\|} 按键没有显示完整键帽
			(实际上其它按键也没有，主要显示了 <code>code</code> 值)，
			下面是源于维基百科的一个英式 "102" 字母数字区域( [=alphanumeric section=] 
			)键盘布局图示:
			</p>

			<figure id="figure-keyboard-alphanumeric-uk">
				<img src="images/keyboard-alphanumeric-uk.svg" width="684" height="225" 
				alt="标准 '102' 字母数字区域键盘布局" />
				<div class="custom-figcaption">英式标准 "102" 字母数字区域键盘布局，
				展示未修改过的英式键帽值</div>
			</figure>

		<h4 id="keyboard-103">韩式 "103" 键盘布局</h4>

			韩语 "103" 键盘基于备用 "101" 键盘布局，并添加了两个额外的键
			(空格键两侧各一个)来处理韩语特定的输入模式。这两个按键是 CODE{Lang2} 
			("Hanja"，键帽为 KEYCAP{한자} ，发音为 PHONETIC{hanja})和CODE{Lang2}
			("HangulMode"，键帽为 KEYCAP{한/영} ，发音为 PHONETIC{han/yeong}) 。

			<p class="note custom-note">
			实际上 KEYCAP{한자} (Hanja) 也就是汉字的意思，这里表示朝鲜汉字，而
			KEYCAP{한/영} (HangulMode) 也就是韩/英，
			这里表示韩文模式和英文模式切换使用。
			</p>

			<figure id="figure-keyboard-103-korean">
				<img src="images/keyboard-103-korean.svg" width="684" height="225" 
				alt="韩式 '103' 键盘布局" />
				<figcaption>韩式 "103" 键盘布局，展示未修改过的韩式按键值</figcaption>
			</figure>

			现代 "103" 布局的键盘包含106个键：字母数字区域( 
			[=alphanumeric section=] )有66个按键，小键盘( [=numpad=] ) 、控制板
			( [=control pad=] )和箭头板( [=arrow pad=]) 和功能区域( 
			[=function section=] )有 43 个键。

		<h4 id="keyboard-104">巴西 "104" 键盘布局</h4>
			巴西使用的 "104" 布局增加了4个新键: "102" 布局中的两个键( CODE{Backslash} 
			和 CODE{IntlBackslash} )加上 CODE{IntlRo} 键(右移键 CODE{ShiftRight} 
			旁边)和小键盘( [=numpad=] )上的一个额外键。这个新的小键盘( [=numpad=] 
			)按键被称为 CODE{NumpadComma} (数字键盘逗号)，因为它代表千位分隔符。
			在巴西键布局上，这个按键键帽标签为 KEYCAP{.} ，并且 CODE{NumpadDecimal} 
			键被键帽标签为 KEYCAP{,} 。

			<figure id="figure-keyboard-104-brazilian">
				<img src="images/keyboard-104-brazilian.svg" width="684" height="225" 
				alt="标准 '104' 键盘布局" />
				<figcaption>标准 "104" 键盘布局，展示未修改过的巴西按键值</figcaption>
			</figure>

			现代 "104" 布局的键盘包含107个键：字母数字区域( 
			[=alphanumeric section=] )有63个按键，小键盘( [=numpad=] ) 、控制板
			( [=control pad=] )和箭头板( [=arrow pad=]) 和功能区域( 
			[=function section=] )有 44 个键。一些巴西键盘没有额外的小键盘( 
			[=numpad=] )按键，只有106个键。

			<p class="note custom-note">
			巴西的键盘以 "102" 键盘布局为基础，从 <code>code</code> 值上看，和 "102"
			键盘布局相同 <code>code</code> 值的两个按键(位于大 KEYCAP{Enter} 下方的
			CODE{Backslash} 和在 KEYCAP{ShiftLeft} 和 KEYCAP{Z} 之间的 
			CODE{IntlBackslash} )具有异同的键帽标签，前者( CODE{Backslash} 
			)的键帽在巴西键盘和英式 "102" 键盘分别是 KEYCAP{]&#125;} 和 KEYCAP{#~}，
			后者( CODE{IntlBackslash} )的键帽在巴西键盘和英式 "102" 键盘 
			<strong>都是</strong> KEYCAP{\|} 。除此之外，<code>code</code> 值为
			CODE{IntlRo} 的额外按键的键帽标签为 KEYCAP{/?} ，
			下面的日式键盘中也包含这个键。<br/> 最后，在小键盘( [=numpad=] 
			)上可能多的一个额外按键表示千位分隔符，它的 <code>code</code> 值为 
			CODE{NumpadComma} ，要理解这个额外按键的意义，需要理解的背景是: 
			不同国家的数字写法不同，常见的就是小数点使用 KEYCAP{.} ，千位分隔符使用 
			KEYCAP{,} ，但是国际化标准组织表示小数点是可以使用实心点或者逗号，
			所以有些地区小数点使用 KEYCAP{,} ，而千位分隔符使用 KEYCAP{.} 
			(正好颠倒了)。以葡萄牙和葡萄牙语地区为例，
			中文数字四千五百六十七点八九使用阿拉伯数字和分隔符号表示为 4.567,89 或 
			4 567,89 (手写可能是 4·567,89 )，而美国地区为 4,567.89 或旧写法 4,567·89 。
			所以在巴西键盘(葡萄牙语地区)的 CODE{NumpadComma} 按键的键帽标签为 
			KEYCAP{.} ，而原本作为小数点分隔符号的 CODE{NumpadDecimal} 
			按键的键帽标签也从 KEYCAP{. Del} 变成了 KEYCAP{,} ，
			并且在巴西键盘实际输入当地语言的时候，
			按下这两个按键生成的字符和键帽是对应的。<br/>
			规范给出的巴西 "104" 键盘未显示完整的键帽(上图主要显示 <code>code</code> 
			值)，下面是来自维基百科的巴西葡萄牙字母数字键盘的图示:
			</p>

			<figure id="figure-keyboard-alphanumeric-brazil">
				<img src="images/keyboard-alphanumeric-brazil.svg" width="684" height="225" 
				alt="巴西 '104' 字母数字区域键盘布局" />
				<div class="custom-figcaption">巴西 "104" 字母数字区域键盘布局，
				展示未修改过的巴西键帽值</div>
			</figure>

		<h4 id="keyboard-106">日式 "106" 键盘布局</h4>
			
			日语 "106" 键盘布局在标准 "101" 键盘布局的基础上修改了一个按键: 

			*	如标准 "102" 键盘布局描述的那样，占用一行的 KEYCAP{Enter} 键上方的 
				<code>code</code> 值为 CODE{Backslash} 的按键被移动到了占用两行的 
				KEYCAP{Enter} 键下方的 KEYCAP{]む} ;
			
			增加了5个新键: 

			*	如备用 "101" 键盘布局的描述那样，<code>code</code> 值为 CODE{Backspace} 
				的按键缩小，为 CODE{IntlYen} (键帽标签为 KEYCAP{¥_} ) 腾出空间; 
			
			*	如巴西 "104" 键盘布局的描述那样，<code>code</code> 值为 CODE{ShiftRight}
				的按键缩小，为 CODE{IntlRo} (键帽标签为 KEYCAP{\ろ} ) 腾出空间; 
			
			*	如韩式 "103" 键盘布局的描述那样，空格键(键帽标签为 KEYCAP{&nbsp;}，
				<code>code</code> 值为 CODE{Space} )被缩小，为三个输入模式(input mode)
				按键腾出空间: 

				*	KEYCAP{&nbsp;} (空格键)左边是 <code>code</code> 值为 CODE{NonConvert} ，
					键帽标签为 KEYCAP{無変換}，发音为 PHONETIC{muhenkan} 的按键。

					<p class="note custom-note">
					GLYPH{無変換} 的意思就是无变换，无变换键的功能是转换假名。
					在光标闪烁的状态下按无变换键可以把输入模式(默认上屏的假名类型)
					从全角平假名切换到全角片假名，再按则切换到半角片假名
					(全角かな→全角カナ→半角カナ)。除了切换模式以外，
					也可以实现输入中的内容的假名转换。关于日语的假名及其输入，请自行查阅
					<a href="https://zh.wikipedia.org/wiki/%E5%81%87%E5%90%8D_(%E6%96%87%E5%AD%97)">
					维基百科</a> 。
					</p>
				
				*	KEYCAP{&nbsp;} (空格键)右边是 <code>code</code> 值为 CODE{Convert} ，
					键帽标签为 KEYCAP{変換} ，发音为 PHONETIC{henkan} 的按键。

					<p class="note custom-note">
					GLYPH{変換} 的意思就是变换，变换键的功能是把输入的假名转汉字。
					这一点和空格键的功能是一样的(因此平常都习惯按空格)。
					所不同的是变换键还有重新转换( GLYPH{再変換} )的功能。
					写文章的时候如果你发现有打错同音字词( GLYPH{誤変換} )
					的时候用光标选定文字，然后再按一下变换键就可以重新选词修改。
					非日语键盘(如中国普遍采用的美式键盘)默认可以用 KEYCAP{Windows} + 
					KEYCAP{/} ( CODE{MetaLeft} + CODE{Slash} )来代替变换键。
					</p>

				*	KEYCAP{変換} 右边是 <code>code</code> 值为 CODE{KanaMode} ，键帽标签为
					KEYCAP{カタカナ/ひらがな/ローマ字} ，发音为 
					PHONETIC{katakana/hiragana/romaji} 的按键。

					<p class="note custom-note">
					GLYPH{カタカナ/ひらがな/ローマ字} 的意思就是 片假名/平假名/罗马字，
					需要配合 KEYCAP{Shift} 和 KEYCAP{Alt} 键来使用: 
					<br/>
					① 单独按这个键，切换回默认的平假名输入模式; <br/>
					② KEYCAP{Shift} + KEYCAP{カタカナ/ひらがな/ローマ字} ，
					切换回片假名输入模式; <br/>
					③  KEYCAP{Alt} + KEYCAP{カタカナ/ひらがな/ローマ字} ，
					切换回罗马字输入模式; <br/>
					</p>

			<figure id="figure-keyboard-106-japanese">
				<img src="images/keyboard-106-japanese.svg" width="684" height="225" 
				alt="标准 '106' 键盘布局" />
				<figcaption>标准 "106" 键盘布局，展示未修改的日语键值
				</figcaption>
			</figure>

			现代 "106" 布局的键盘包含109个键：字母数字区域( 
			[=alphanumeric section=] )有66个按键，小键盘( [=numpad=] ) 、控制板
			( [=control pad=] )和箭头板( [=arrow pad=]) 和功能区域( 
			[=function section=] )有 43 个键。

			<p class="note custom-note">
			上面的图示虽然完整显示了按键 <code>code</code> 值，
			但是字母数字区域没有显示每个按键的完整键帽。
			日本国内多使用JIS标准的键盘布局，也称为日文假名键盘，
			源自维基百科的图示如下:
			</p>

			<figure id="figure-keyboard-alphanumeric-japanese">
				<img src="images/keyboard-alphanumeric-japanese.svg" 
				width="684" height="225" 
				alt="日式 '106' 字母数字区域键盘布局" />
				<div class="custom-figcaption">日式 "104" 字母数字区域键盘布局，
				展示未修改过的日本键帽值</div>
			</figure>

		<h4 id="keyboard-mac">苹果键盘布局</h4>

			一般来说，苹果键盘的布局与 PC 键盘相同，但如下图所示，存在一些差异。

			<figure id="figure-keyboard-mac">
				<img src="images/keyboard-mac.svg" width="684" height="225" 
				alt="苹果扩展键盘布局" />
				<figcaption>苹果扩展键盘布局，展示未修改的英文键值</figcaption>
			</figure>

			在此图中，绿色键表示已移动到新位置的键，而蓝色键表示已添加的键。

			<p class="note custom-note">
			本节没有讨论很多关于苹果标准键盘的内容，可以参考维基百科-
			<a href="https://en.wikipedia.org/wiki/Apple_keyboards">
			Apple_keyboards</a> 查阅更多内容。下面是在苹果标准键盘上，
			一些键帽显示为特殊符号并与 PC 键盘进行对比的 <strong>非规范表格</strong>:
			</p>

			++----------------------------------------+---------------+------------------+-------------------+
			=| code 值                                | Mac 特殊符号  | Mac 键帽         | PC 特殊符号或键帽 |
			 +----------------------------------------+---------------+------------------+-------------------+
			+| CODE{MetaLeft} / CODE{MetaRight}       | KEYCAP{⌘}     | KEYCAP{Command}  | KEYCAP{⊞}        |
			+| CODE{ControlLeft} / CODE{ControlRight} | KEYCAP{⌃}     | KEYCAP{Control}  | KEYCAP{Ctrl}      |
			+| CODE{AltLeft} / CODE{AltRight}         | KEYCAP{⌥}     | KEYCAP{Option}   | KEYCAP{Alt}       |
			+| CODE{ShiftLeft} / CODE{ShiftRight}     | KEYCAP{⇧}     | KEYCAP{Shift}    | KEYCAP{Shift}     |
			+| CODE{CapsLock}                         | KEYCAP{⇪}     | KEYCAP{CapsLock} | KEYCAP{CapsLk}    |
			+| CODE{Escape}                           | KEYCAP{⎋}     | KEYCAP{Esc}      | KEYCAP{Esc}       |
			+| CODE{Backspace}                        | KEYCAP{⌫}     | KEYCAP{Delete}   | KEYCAP{Backspace} |
			+++---------------------------------------+---------------+------------------+-------------------+


		<h4 id="keyboard-laptops">笔记本电脑键盘布局</h4>

			笔记本电脑键盘上可用的空间有限，
			这通常意味着需要调整物理按键布局以适应所有所需的键。
			字母数字区域( [=alphanumeric section=] )中的书写系统键( 
			[=writing system keys=] )往往保持完整，
			但其他键盘区域通常与其他键组合或被完全移除。

			<figure id="figure-keyboard-laptop-mac">
				<img src="images/keyboard-laptop-mac.svg" width="684" height="225" 
				alt="苹果笔记本电脑键盘布局" />
				<figcaption>苹果笔记本电脑键盘布局</figcaption>
			</figure>

			在这个苹果笔记本电脑键盘中，右侧的控制键( CODE{ControlRight} )被移除，
			为半行高箭头键腾出了空间，左侧增加了一个 KEYCAP{Fn} 键。

			<p class="note custom-note">
			右上方增加了一个电源按键。
			</p>

			<figure id="figure-keyboard-laptop">
				<img src="images/keyboard-laptop.svg" width="684" height="225" 
				alt="PC 笔记本电脑键盘布局示例" />
				<figcaption>PC 笔记本电脑键盘布局示例</figcaption>
			</figure>

			PC 笔记本电脑键盘差异很大，但这个示例键盘展示了一些常见的键盘布局。
			控制板( [=control pad=] )区域按键沿右侧添加，箭头板( [=arrow pad=] 
			)区域按键沿底部插入。右 KEYCAP{Shift} 键通常会收缩，为向上箭头键( 
			KEYCAP{↑} )腾出空间，而右 KEYCAP{Meta} 键通常会被完全移除。

		<h4 id="other-locales">其它地区的键盘布局</h4>

			本规范中没有明确描述其它地区的键盘布局，
			因为它们通常从一个现有键盘布局出发，并通过更改键帽和键映射对其进行调整。

			因为这些键盘不引入新的物理键，所以它们不需要明确的文档进行描述。

			这些键盘通常基于 "101" (标准或备用) 或 "102" 布局。例如，常见的阿拉伯语、
			西里尔语、希腊语、印地语、高棉语和泰语键盘都基于 "101" 或 "102" 键盘布局。

		<h4 id="keyboard-chinese">中文键盘</h4>

		<em><strong>本节不是规范的，并且不属于源英文原档规范。</strong></em>

		<q>中国大陆由于以基于拉丁字母的汉语拼音为主要输入法，故不使用专用的中文键盘，
		而使用美国标准键盘布局，少部分键盘会在键帽上加印五笔字根。</q> —— 
		<a href="https://zh.wikipedia.org/wiki/键盘布局#中文「四合一」鍵盤">
		维基百科</a> 

		而在使用注音或其它非拼音输入法的地区(台湾、香港及澳门等地)，
		使用一种叫做中文"四合一"键盘，它同样基于美式标准 "101" 键盘，
		只不过在字母数字区域的按键键帽上有四个表示不同意思的字符标签: <br>

		*	每个键的左上角是美式标准布局键盘键帽标签;

		*	每个键的右上角是注音符号; 

		*	每个键的左下角是仓颉输入法字符;

		*	每个键的右下角是大易输入法字符;

		下图是源于维基百科的一个中文"四合一"键盘:
		
		<figure id="figure-keyboard-cn-taiwan">
			<img src="images/keyboard-101-cn-taiwan.svg" width="684" height="225" 
			alt="台湾地区中文'四合一'键盘字母数字区域" />
			<div class="custom-figcaption">台湾地区中文"四合一"键盘字母数字区域</div>
		</figure>


	<h3 id="keyboard-mobile">移动设备键盘</h3>

		在内容作者希望依赖一个移动设备键盘(mobile keypad)的机械布局的情况下，
		本规范建议使用 [[ISO9995-8]] 标准中指定的键盘配置，
		该标准定义了一种数字键盘布局(numeric keypad layout)和在 UNI{U+0061}
		... UNI{U+007A}( GLYPH{a} - GLYPH{z} ) 到数字按键 KEYCAP{2} - KEYCAP{9} 
		范围内的 Unicode 字符的二次分派，(该布局)常作为一种适用于某些国际用途的布局。

		<p class="note">
		这种键盘布局，尤其是字母的分布，适用于英语设备，
		与许多(非英语)用户的键盘或配置不匹配。
		内容作者不能依赖任何特定的配置，并且应该以国际化和本地化的方式创建内容。
		</p>

		<figure id="figure-numeric-keypad">
			<img src="images/mobile-keypad.svg" width="140" height="305"
			alt="移动设备键盘布局" />
			<figcaption>通用移动键盘的图形描述</figcaption>
		</figure>

		<p class="note custom-note">
		现代的移动设备多为智能手机，不再具有上图所示的物理键盘，而是使用触摸屏幕，
		通过虚拟键盘( [[#keyboard-chording-virtual]] )进行文本输入。下图是苹果公司发布的 IPhone 14 智能手机:
		</p>

		<figure id="figure-iphone14">
			<img src="images/IPhone-14-vector.svg" width="140" height="305"
			alt="IPhone14 正面图" />
			<div class="custom-figcaption">IPhone14 正面图，灰色区域为触摸屏，
			不包含物理键盘，上方"刘海" 包含前置摄像头</div>
		</figure>

	<h3 id="remote-control">媒体遥控器</h3>

		许多键盘包含控制媒体功能的特殊键。越来越多的媒体设备，尤其是电视，
		都支持网络。混合键盘/遥控设备(Hybrid keyboard/remote-control devices)
		越来越普遍。为了满足这些混合 Web/媒体 设备的需求，
		本规范定义了除传统键盘键外，常见的遥控器按钮(remote control buttons)。

		由于尺寸较小，遥控器上的按键(或按钮)通常是模态的，
		一个按键根据屏幕内容的上下文执行不同的功能。此外，
		许多键用作切换键(toggles)，在两个或多个状态之间来回切换(请参见切换按键)。
		这些遥控器按钮通常没有修饰符状态，因此每个按钮都被分配了一个功能
		(如 KEYCAP{Play} 、 KEYCAP{Pause} 、 KEYCAP{Up} 、 KEYCAP{Menu} 或 
		KEYCAP{Exit} )。

		<figure id="figure-media-remote-control">
			<img src="images/remote-control.svg" width="102" height="422" 
			alt="媒体遥控器示例" />
			<figcaption>媒体遥控器的图形描述</figcaption>
		</figure>

	<h3 id="keyboard-chording-virtual">虚拟键盘和和弦键盘</h3>

		虚拟键盘(virtual keyboards)是一组基于软件的按键集合，有各种不同的排列方式，
		通常出现在触摸屏设备上。它们通常是模态的(modal)，
		能够在不同的动态键集之间切换，例如字母键、数字键或符号键。由于缺乏物理限制，
		这些键盘 <span class="zh-upper">可以</span> 呈现最广泛的字符，
		包括表情符号和其他符号。然而，在可能的情况下，虚拟键盘 
		<span class="zh-upper">应当</span> 生成正常范围的键盘事件和 
		<code>code</code> 值，以便于开发并与现有内容兼容。

		<p class="note custom-note">
		关于模态的解释，参考 AI 的回答，但不保证准确: <br/>
		<q>如果你说键盘按键是 <strong>模态的</strong> ，
		那么通常是指这些按键的行为和反应是由软件程序控制的，而不是物理结构本身。
		在模态键盘中，按键的行为和反应是根据用户的输入来决定的，
		而不是按键本身的物理结构。<br/>
		模态键盘通常被设计为可以响应不同类型的输入，例如按压、轻触、点击等，
		以提供更自然、直观的输入体验。模态键盘中的按键可以根据用户的输入来变化，
		例如在按下一个按键时，按键的状态会从“松开”变为“按下”，
		并且可能会产生轻微的震动或声音反馈，以增强用户的操作感受。 <br/>
		因此，将键盘按键视为模态的，主要是基于其行为和反馈的变化，
		而不是按键物理结构本身。</q> —— 
		<a href="https://yiyan.baidu.com/">文心一言</a> 。
		</p>

		<p class="note custom-note">
		虚拟键盘依靠的软件也就是输入法编辑器(input method editor)，详情参见 
		[[UIEvents]] 中的 <a href="https://mangwu.github.io/uievents-cn/#keys-IME">
		输入法编辑器</a> 。下图是一个拼音输入法编辑器软件(微软操作系统自带的):
		</p>
		
		<figure id="figure-input-method-editor">
			<img src="images/microsoft-pinyin-input-method-editor.svg" 
			width="750" height="200" 
			alt="拼音输入法编辑器" />
			<div class="custom-figcaption">拼音输入法编辑器</div>
		</figure>

		和弦键盘(Chording keyboards)，也称为弦键组(chorded keysets)或和弦键盘
		(chord keyboards)，是一种键输入设备，通过组合或顺序按下几个键来产生值，
		通常是为了在一组缩小的键上模拟全范围的字符或命令，并且可以单手使用。
		和弦键盘 <span class="zh-upper">可以</span> 有额外的模式键来在键值之间切换，
		并且键按下时产生的键值的数量和类型会有所不同，
		但这种键盘最终产生的键值 <span class="zh-upper">应当</span> 
		与本规范中描述的键值范围相匹配。

		对于这些和其他备用模态键盘，在不同模式之间进行切换的并被
		<span class="zh-upper">推荐的</span> 的按键的 {{KeyboardEvent/key}} 值:
		KEY{Alphanumeric} ， KEY{CapsLock} ， KEY{NumLock} 和 KEY{SymbolLock} 。

		<p class="note custom-note">
		更多关于和弦键盘的内容，参阅英文维基百科的 
		<a href="https://en.wikipedia.org/wiki/Chorded_keyboard">
		Chorded_keyboard</a> 。
		</p>
	
	<h3 id="wiki-keyboard-sections">非标准键盘分区</h3>

		<strong>本节不是规范的，并且不属于源英文原档规范。</strong>

		本规范在键盘分区时，将标准键盘分为 5 个通用区域，
		这种分类方式主要基于按键的位置。

		对于一般的标准计算机的键盘(也称 PC/AT 键盘， QWEWRTY 键盘)
		维基百科介绍了一种基于按键的用途进行分类的方式: 

		*	功能键(Function keys) —— KEYCAP{F1} ~ KEYCAP{F12} 。<q>
			功能键是计算机或终端键盘上的一种键，可以对其进行编程，
			以使操作系统命令解释器或应用程序执行某些操作，这是软键的一种形式。
			在一些键盘/计算机上，功能键可能具有默认操作，可在开机时访问。</q>
			在微软操作系统中，
			每个应用程序可以自定义决定每个功能键对应用程序本身意味着什么，
			并且在功能键被按下时执行应用程序想要的操作，例如在一般的浏览器中，
			KEYCAP{F5} 表示刷新浏览器的当前页面。 

		* 字母数字键或字符键(Alphanumeric or Character keys ) —— KEYCAP{~`} 
			， KEYCAP{1!} ， KEYCAP{2@} ~ KEYCAP{9&#40;} ， KEYCAP{0&#41;} ， 
			KEYCAP{-_} ， KEYCAP{=+} ， KEYCAP{aA} ~ KEYCAP{zZ} ， KEYCAP{&#91;&#123;} ， 
			KEYCAP{&#93;&#125;} ， KEYCAP{\|} ， KEYCAP{;:} ， KEYCAP{'"} ， 
			KEYCAP{,&lt;} ，KEYCAP{.&gt;} ， KEYCAP{/?} ， KEYCAP{&nbsp;} (空格键)。
			这些按键都用于键入字母和其它字符(typing)。
		
		*	回车键和编辑键(Enter and editing keys) —— KEYCAP{Enter/↵} ， 
			CODE{NumpadEnter} ， KEYCAP{Backspace} ， KEYCAP{Delete} ，KEYCAP{Insert}
			。在文本模式下，
			*	"回车(Enter)"键可以终止一段文本，并将编辑光标移动到下一行的开头; 

			*	"回退(Backspace)" 键可以将编辑光标向后移动一个位置，并删除该位置的字符; 

			*	"删除(Delete)"键可以删除编辑光标前面或下面的字符，或删除当前选择的对象;

			*	"插入(Insert)"键可以切换输入模式。在插入模式(insert mode ，默认)下，
				光标在当前位置插入一个字符，原来的字相应后移。在覆盖模式(overtype mode)
				下，光标位置新输入字会替代原来的字。这一按键常在计算机终端中使用，
				微软的 word 编辑器也有效果，其它可输入框可能无效。下面是在 word 
				编辑器中使用插入键的一个例子，

				<figure id="figure-insert-key">
					<img src="images/insert-key.gif" 
					width="409" height="144" 
					alt="插入键" />
					<div class="custom-figcaption">word 编辑器里的插入键示例，
					在移动光标并打下"45678"后按下了插入键，切换成了覆盖模式</div>
				</figure>
		
		* 系统和 GUI 键(系统和 GUI 按键) —— 左右两个 KEYCAP{Meta} 属于系统命令键
			(system command keys)，GUI 按键包括 KEYCAP{Esc} ， KEYCAP{PrtScr SysRq} ， 
			KEYCAP{Pause Break} :

			*	系统命令按键也就是 KEYCAP{Meta} 键，它实际上也是一种修饰符按键，
				在不同的操作系统上有不同的键帽。 <q>Meta</q> 这个单词有变化之意，
				在微软的 Windows 操作系统也常用于配合其它按键调用许多常见系统功能;

				<div class="note custom-note">
				Meta 键是以前 MIT 计算机键盘上的的一个特殊键，例如 Symbolics Space-cadet 
				keyboard 就是 MIT Lisp 计算机上的由 Tom knight 设计的键盘，
				后来 Sun 的键盘上也包含有此键，只不过标示为 Sun 的菱形徽标。现代，
				这个按键发展到和操作系统相关联，在 Linux 和 BSD 操作系统上，它是 
				KEYCAP{Super} 键，在 Windows 操作系统上，它是 KEYCAP{⊞Win} 键，在 
				MacOS 操作系统上 它是 KEYCAP{⌘Cmd} ，虽然键帽不同，但是这个按键的 
				<code>code</code> 值都是 CODE{MetaLeft} 或 CODE{MetaRight} 。<br/>
				查阅更多的按键信息，可以在维基百科上搜索 Meta Key ， Super Key ，
				Command Key 或 Windows Key 。
				</div>
				
			* KEYCAP{Esc} 键的 <code>code</code> 值是 CODE{Escape} ， 
				位于标准键盘布局的左上角。<q>escape</q> 本身有逃离，摆脱的意思，
				现代常称其为退出键，中断键，
				在应用程序中也常使用这个按键执行程序的退出和中断功能;

				<div class="note custom-note">
				在 <strong>以前</strong> 的计算机键盘上，KEYCAP{Esc} 
				键是一个用于生成转义字符( 
				<a href="https://en.wikipedia.org/wiki/Escape_character">
				Escape character</a> )的键。但是现在的计算机用户不再需要关心转义序列，
				CODE{Escape} 键被应用程序程序员挪用，通常是指 <em>停止</em> ，用于 
				<em>"否"、"退出"、"取消"</em> 或 <em>"中止"</em> 对话框中的快捷键，
				也是许多 Web 浏览器中 <em>停止</em> 按钮的常用快捷键，
				并用于取消拖放操作。<br/>
				除此之外，不同操作系统对 CODE{Escape} 键也有许多不同的快捷键使用方式。
				在 Windows 操作系统上，按住 KEYCAP{Ctrl} 和 KEYCAP{Esc} 
				可以调出开始菜单，相当于按下了 KEYCAP{⊞Win} 键。在 MacOS 中， 
				KEYCAP{Esc} 通常会关闭或取消对话框或工作表， KEYCAP{⌘Command} + 
				KEYCAP{⌥ Option} + KEYCAP{Esc} 组合会打开强制退出对话框，
				允许用户结束无响应的应用程序。</br>
				在维基百科的 <a href="https://en.wikipedia.org/wiki/Esc_key">Esc_key</a>
				上查阅更多 CODE{Escape} 键信息。
				</div>
			
			*	KEYCAP{PrtScr SysRq} 按键的 <code>code</code> 值是 CODE{PrintScreen} ，
				它的键帽也可以是 KEYCAP{Print Screen} ，除此之外还有 
				<em>Print Scrn ，Prnt Scrn ， Prnt Scr ， Prt Scrn ， Prt Scn ， 
				Prt Scr ， Prt Sc ， Pr Sc 或 PS</em> 缩写，它在(标准键盘布局)功能按键 
				KEYCAP{F12} 的右边，锁定按键 KEYCAP{Scroll Lock} 的左边，表示打印屏幕，
				通俗而言就是截图的意思。
				
				<div class="note custom-note">
				在 <strong>以前</strong> 基于命令行的操作系统(如 MS-DOS )下，
				此键会将当前文本模式屏幕内存缓冲区的内容复制到标准打印机端口。
				现在使用图形界面的新一代操作系统倾向于将当前屏幕的位图图像或屏幕截图
				(screenshot)保存到剪贴板(clipboard)或类似的存储区域。例如在 
				Windows 操作系统中按下 KEYCAP{PrtScr SysRq} 按键，然后通过 
				KEYCAP{⊞Win} + KEYCAP{V} 调出剪贴板 GUI 程序，会发现包含刚才屏幕截图，
				如下图。除此之外，按下 KEYCAP{⊞Win} + KEYCAP{PrtScr SysRq} 组合按键，
				会将屏幕截图保存在默认的图片文件夹中。
				</div>

			  <figure id="figure-print-screen">
					<img src="images/print-screen.svg" 
					width="409" height="800" alt="按下 Print Screen 按键后的屏幕截图" />
					<div class="custom-figcaption">
					KEYCAP{⊞ Win} + KEYCAP{V} 调出剪贴板 GUI 程序，里面包含按下 
					Print Screen 按键后的屏幕截图</div>
				</figure>
			
			*	KEYCAP{Pause Break} 按键的 <code>code</code> 值是 CODE{Pause} ，
				称为中断键，暂停键，它也可以使用符号 ⎉ 表示。

				<div class="note custom-note">
				KEYCAP{Pause Break} 键最大的用处在于能快速调出电脑的系统属性，
				按下组合键 KEYCAP{⊞ Win} + EYCAP{Pause Break} ，即可看到。
				除此之外，在开机和处于 DOS 模式的时候，按下 KEYCAP{Pause Break} 
				来暂停进程，之后按下任意键便可继续。有些 IDE (基础开发环境)
				在调试程序时可能也会使用 KEYCAP{Pause Break} 作为暂停程序的快捷键，
				并且提供 KEYCAP{Ctrl} + KEYCAP{Pause Break} 组合键结束调试。
				</div>

		*	小键盘数字按键(Numeric keypad) —— KEYCAP{0 Ins} ，KEYCAP{1 End} ，
			KEYCAP{3 PgDn} ， KEYCAP{4 ←} ， KEYCAP{5} ， KEYCAP{6 →} ，KEYCAP{7 Home}
			， KEYCAP{8 ↑} ， KEYCAP{9 PgUp} ， KEYCAP{/} ， KEYCAP{*} ， KEYCAP{-} ，
			KEYCAP{-} ， KEYCAP{. Del} 。这些数字按键便于输入数学数字和运算符号，
			它们的 <code>code</code> 值和字符键区域的数字键不同，前者以"Numpad" 
			为前缀，后者以"digit"为前缀，例如 CODE{Numpad0} 和 CODE{Digit0} 。
			除此之外，小键盘数字按键组合 KEYCAP{Shift} 按键可以实现其它区域按键的功能
				




<h2 id="code-value-tables">键盘事件 {{KeyboardEvent/code}} 值表格</h2>

	This section defines a list of values which are appropriate for use as
	{{KeyboardEvent/code}} values.

	A <dfn>key code attribute value</dfn> is any of the values given in the
	"<code>KeyboardEvent.code</code>" column of any of the tables in this section of the
	specification.

	Each table in this section has a "Required" column which indicates whether or not the
	value is required for a conforming implementation. Entries where the "Required" column
	is "No" are optional and may be used by implementations to support special keyboards
	(such as multimedia or legacy keyboards).
	
	<p class="note">
	Note: Some values listed in this specification as "Required" may not be available on
	all platforms or devices. For example, Mac keyboards do not have an KEYCAP{Insert} key
	whereas standard PC keyboards do not have a KEYCAP{Help} key.
	</p>

	For every key listed as "Required" in this specification, a conforming implementation
	of the {{KeyboardEvent}} interface MUST return the correct value as long as that key
	is available on that platform.
	
	<p class="note">
	Note: While every attempt has been made to make this list of values as complete as possible,
	new values will periodically need to be defined as new input devices are introduced.
	Rather than allowing user agents to define their own [=key code attribute values=]
	(which are unlikely to be consistent across multiple user agents), bugs SHOULD be
	filed so that this specification can be updated.
	</p>

	<h3 id="key-alphanumeric-section">Alphanumeric Section</h3>

		The <dfn>alphanumeric section</dfn> is the main section of the keyboard. It
		contains keys that fall into two general
		categories: [=writing system keys=] whose meaning
		changes based on the current keyboard layout, and
		[=functional keys=] which are (mostly) the same for all
		layouts.

		<h4 id="key-alphanumeric-writing-system">Writing System Keys</h4>

			The <dfn>writing system keys</dfn> are those that change
			meaning (i.e., they produce different {{KeyboardEvent/key}}
			values) based on the current locale and keyboard layout.

			<figure id="figure-keyboard-codes-alphanum1">
				<img src="images/keyboard-codes-alphanum1.svg" width="653" height="225" alt="The writing system keys" />
				<figcaption>The [=writing system keys=] in the [=alphanumeric section=]</figcaption>
			</figure>

			This figure shows a hypothetical keyboard that combines all the
			[=writing system keys=] (shown in blue and green) found on the
			various keyboards. Blue keys are present on all standard
			keyboards while green keys are only available on some keyboards.

			<div class="example">
				The CODE{Digit2} and CODE{KeyQ} keys are [=writing system keys=] that
				generate KEY_NOLINK{2} and KEY_NOLINK{q} when the US locale is
				active and KEY_NOLINK{é} and KEY_NOLINK{a} when the French locale is active.
			</div>

			The name shown on each key is the {{KeyboardEvent/code}}
			assigned to that key. Wherever possible, the
			{{KeyboardEvent/code}} names are based on the name for the US
			key in that position (i.e., they are based on the US keyboard
			layout). For keys that don't exist on the US keyboard, names
			from the UK or Japanese layouts are used instead.

			Note that there are two CODE{Backslash} keys in this figure: a
			large one at the end of Row D on the 101-key layout, and a
			smaller one between CODE{Quote} and CODE{Enter} on Row C of the
			102-, 104- and 106-key layouts. Only one CODE{Backslash} key
			may be present on a keyboard layout.

			BEGIN_CODE_TABLE alphanumeric-writing-system "List of code values for writing system keys in the Alphanumeric section."
				CODE Backquote		KEYCAP{`~} on a US keyboard. This is the KEYCAP{半角/全角/漢字}
									(PHONETIC{hankaku/zenkaku/kanji}) key on Japanese keyboards
				CODE Backslash		Used for both the US KEYCAP{\|} (on the 101-key layout) and also for the key
									located between the KEYCAP{"} and KEYCAP{Enter} keys on row C of the 102-,
									104- and 106-key layouts.
									Labelled KEYCAP{#~} on a UK (102) keyboard.
				CODE BracketLeft	KEYCAP{[{} on a US keyboard.
				CODE BracketRight	KEYCAP{]&rcub;} on a US keyboard.
				CODE Comma			KEYCAP{,&lt;} on a US keyboard.

				CODE Digit0			KEYCAP{0)} on a US keyboard.
				CODE Digit1			KEYCAP{1!} on a US keyboard.
				CODE Digit2			KEYCAP{2@} on a US keyboard.
				CODE Digit3			KEYCAP{3#} on a US keyboard.
				CODE Digit4			KEYCAP{4$} on a US keyboard.
				CODE Digit5			KEYCAP{5%} on a US keyboard.
				CODE Digit6			KEYCAP{6^} on a US keyboard.
				CODE Digit7			KEYCAP{7&} on a US keyboard.
				CODE Digit8			KEYCAP{8*} on a US keyboard.
				CODE Digit9			KEYCAP{9(} on a US keyboard.

				CODE Equal			KEYCAP{=+} on a US keyboard.
				CODE IntlBackslash	Located between the left KEYCAP{Shift} and KEYCAP{Z} keys.
									Labelled KEYCAP{\|} on a UK keyboard.
				CODE IntlRo			Located between the KEYCAP{/} and right KEYCAP{Shift} keys.
									Labelled KEYCAP{\ろ} (PHONETIC{ro}) on a Japanese keyboard.
				CODE IntlYen		Located between the KEYCAP{=} and KEYCAP{Backspace} keys.
									Labelled KEYCAP{¥} (PHONETIC{yen}) on a Japanese keyboard. KEYCAP{\/} on a
									Russian keyboard.

				CODE KeyA			KEYCAP{a} on a US keyboard.
									Labelled KEYCAP{q} on an AZERTY (e.g., French) keyboard.
				CODE KeyB			KEYCAP{b} on a US keyboard.
				CODE KeyC			KEYCAP{c} on a US keyboard.
				CODE KeyD			KEYCAP{d} on a US keyboard.
				CODE KeyE			KEYCAP{e} on a US keyboard.
				CODE KeyF			KEYCAP{f} on a US keyboard.
				CODE KeyG			KEYCAP{g} on a US keyboard.
				CODE KeyH			KEYCAP{h} on a US keyboard.
				CODE KeyI			KEYCAP{i} on a US keyboard.
				CODE KeyJ			KEYCAP{j} on a US keyboard.
				CODE KeyK			KEYCAP{k} on a US keyboard.
				CODE KeyL			KEYCAP{l} on a US keyboard.
				CODE KeyM			KEYCAP{m} on a US keyboard.
				CODE KeyN			KEYCAP{n} on a US keyboard.
				CODE KeyO			KEYCAP{o} on a US keyboard.
				CODE KeyP			KEYCAP{p} on a US keyboard.
				CODE KeyQ			KEYCAP{q} on a US keyboard.
									Labelled KEYCAP{a} on an AZERTY (e.g., French) keyboard.
				CODE KeyR			KEYCAP{r} on a US keyboard.
				CODE KeyS			KEYCAP{s} on a US keyboard.
				CODE KeyT			KEYCAP{t} on a US keyboard.
				CODE KeyU			KEYCAP{u} on a US keyboard.
				CODE KeyV			KEYCAP{v} on a US keyboard.
				CODE KeyW			KEYCAP{w} on a US keyboard.
									Labelled KEYCAP{z} on an AZERTY (e.g., French) keyboard.
				CODE KeyX			KEYCAP{x} on a US keyboard.
				CODE KeyY			KEYCAP{y} on a US keyboard.
									Labelled KEYCAP{z} on a QWERTZ (e.g., German) keyboard.
				CODE KeyZ			KEYCAP{z} on a US keyboard.
									Labelled KEYCAP{w} on an AZERTY (e.g., French) keyboard, and KEYCAP{y} on a
									QWERTZ (e.g., German) keyboard.

				CODE Minus			KEYCAP{-_} on a US keyboard.
				CODE Period			KEYCAP{.&gt;} on a US keyboard.
				CODE Quote			KEYCAP{'"} on a US keyboard.
				CODE Semicolon		KEYCAP{;:} on a US keyboard.
				CODE Slash			KEYCAP{/?} on a US keyboard.
			END_CODE_TABLE

		<h4 id="key-alphanumeric-functional">Functional Keys</h4>

			The <dfn>functional keys</dfn> (<em>not to be confused with the
			[=function keys=] described later</em>) are those keys in the
			[=alphanumeric section=] that provide general editing
			functions that are common to all locales (like KEYCAP{Shift},
			KEYCAP{Tab}, KEYCAP{Enter} and KEYCAP{Backspace}). With a few
			exceptions, these keys do not change meaning based on the
			current keyboard layout.

			<figure id="figure-keyboard-codes-alphanum2">
				<img src="images/keyboard-codes-alphanum2.svg" width="653" height="225" alt="The standard set of functional keys" />
				<figcaption>The standard set of [=functional keys=] in the [=alphanumeric section=]</figcaption>
			</figure>

			The CODE{AltRight} key (highlighted in green) is the only
			[=functional key=] that does not generate the same
			{{KeyboardEvent/key}} value for every locale. In some locales it
			produces KEY{Alt} while in others it produces KEY{AltGraph}.

			BEGIN_CODE_TABLE alphanumeric-functional-1 "List of code values for functional keys in the Alphanumeric section."
				CODE AltLeft		KEYCAP{Alt}, KEYCAP{Option} or KEYCAP{&#8997;}.
				CODE AltRight		KEYCAP{Alt}, KEYCAP{Option} or KEYCAP{&#8997;}.
									This is labelled KEYCAP{AltGr} key on many keyboard layouts.
				CODE Backspace		KEYCAP{Backspace} or KEYCAP{&#9003;}.
									Labelled KEYCAP{Delete} on Apple keyboards.
				CODE CapsLock		KEYCAP{CapsLock} or KEYCAP{&#8682;}
				CODE ContextMenu	The application context menu key, which is typically found between the right
									KEYCAP{Meta} key and the right KEYCAP{Control} key.
				CODE ControlLeft	KEYCAP{Control} or KEYCAP{&#8963;}
				CODE ControlRight	KEYCAP{Control} or KEYCAP{&#8963;}
				CODE Enter			KEYCAP{Enter} or KEYCAP{&crarr;}. Labelled KEYCAP{Return} on Apple keyboards.
				CODE MetaLeft		The Windows, KEYCAP{&#x2318;}, KEYCAP{Command} or other OS symbol key.
				CODE MetaRight		The Windows, KEYCAP{&#x2318;}, KEYCAP{Command} or other OS symbol key.
				CODE ShiftLeft		KEYCAP{Shift} or KEYCAP{&#8679;}
				CODE ShiftRight		KEYCAP{Shift} or KEYCAP{&#8679;}
				CODE Space			KEYCAP{&nbsp;} (space)
				CODE Tab			KEYCAP{Tab} or KEYCAP{&#8677;}
			END_CODE_TABLE

			On some keyboards (notably Japanese and Korean) the spacebar is
			reduced in size to make room for extra keys on the bottom row (Row A).
			These keys typically allow the users to change the current input
			mode. Note that even though some of these Japanese and Korean
			keys occupy the same physical location on the keyboard, they use
			different {{KeyboardEvent/code}} values.

			<figure id="figure-function-row-a">
				<img src="images/functional-row-a.svg" width="700" height="160" alt="Comparison of the lower row of functional keys" />
				<figcaption>Comparison of the lower row of [=functional keys=] on different keyboards</figcaption>
			</figure>

			BEGIN_CODE_TABLE alphanumeric-functional-2 "List of code values for functional keys found on Japanese and Korean keyboards."
				CODE Convert		Japanese: KEYCAP{変換} (PHONETIC{henkan})
				CODE KanaMode		Japanese: KEYCAP{カタカナ/ひらがな/ローマ字} (PHONETIC{katakana/hiragana/romaji})
				CODE_OPT Lang1		Korean: HangulMode KEYCAP{한/영} (PHONETIC{han/yeong})<br/>Japanese (Mac keyboard):
									KEYCAP{かな} (PHONETIC{kana})
				CODE_OPT Lang2		Korean: Hanja KEYCAP{한자} (PHONETIC{hanja})<br/>Japanese (Mac keyboard):
									KEYCAP{英数} (PHONETIC{eisu})
				CODE_OPT Lang3		Japanese (word-processing keyboard): Katakana
				CODE_OPT Lang4		Japanese (word-processing keyboard): Hiragana
				CODE_OPT Lang5		Japanese (word-processing keyboard): Zenkaku/Hankaku
				CODE NonConvert 	Japanese: KEYCAP{無変換} (PHONETIC{muhenkan})
			END_CODE_TABLE

			On Apple keyboards, some keys on the bottom row are omitted and
			others are arranged in a different order.

	<h3 id="key-controlpad-section">Control Pad Section</h3>

		The <dfn>control pad</dfn> section of the keyboard is the set of (usually 6) keys
		that perform navigating and editing operations, for example, KEYCAP{Home},
		KEYCAP{PageUp} and KEYCAP{Insert}.

		<figure id="figure-control-pad">
			<img src="images/control-pad.svg" width="495" height="135" alt="Standard Control Pad layouts" />
			<figcaption>Standard [=control pad=] layouts</figcaption>
		</figure>

		BEGIN_CODE_TABLE controlpad "List of code values for keys in the ControlPad section."
			CODE Delete		KEYCAP{&#8998;}. The forward delete key.
							Note that on Apple keyboards, the key labelled KEYCAP{Delete} on the main part of
							the keyboard should be encoded as CODE{Backspace}.
			CODE End		KEYCAP{Page Down}, KEYCAP{End} or KEYCAP{&#8600;}
			CODE Help		KEYCAP{Help}. Not present on standard PC keyboards.
			CODE Home		KEYCAP{Home} or KEYCAP{&#8598;}
			CODE Insert		KEYCAP{Insert} or KEYCAP{Ins}. Not present on Apple keyboards.
			CODE PageDown	KEYCAP{Page Down}, KEYCAP{PgDn} or KEYCAP{&#8671;}
			CODE PageUp		KEYCAP{Page Up}, KEYCAP{PgUp} or KEYCAP{&#8670;}
		END_CODE_TABLE

		<p class="note">
		The {{KeyboardEvent/code}} for the KEYCAP{Fn} key (found on some
		Apple keyboards) is defined below in the [=function section=].
		</p>

	<h3 id="key-arrowpad-section">Arrow Pad Section</h3>

		The <dfn>arrow pad</dfn> contains the 4 arrow keys. The keys are commonly
		arranged in an "upside-down T" configuration.


		<figure id="figure-arrow-pad">
			<img src="images/arrow-pad.svg" width="160" height="115" alt="Standard Arrow Pad layout" />
			<figcaption>Standard [=arrow pad=] layout</figcaption>
		</figure>

		BEGIN_CODE_TABLE arrowpad "List of code values for keys in the ArrowPad section."
			CODE ArrowDown	KEYCAP{&darr;}
			CODE ArrowLeft	KEYCAP{&larr;}
			CODE ArrowRight KEYCAP{&rarr;}
			CODE ArrowUp	KEYCAP{&uarr;}
		END_CODE_TABLE

	<h3 id="key-numpad-section">Numpad Section</h3>

		The <dfn>numpad</dfn> section is the set of keys on the keyboard arranged in
		a grid like a calculator or mobile phone. This section contains numeric and
		mathematical operator keys. Often this section will contain a KEYCAP{NumLock}
		key which causes the keys to switch between the standard numeric functions
		and mimicking the keys of the [=control pad=] and [=arrow pad=].
		Laptop computers and compact keyboards will commonly omit these
		keys to save space.

		A <dfn>keypad</dfn> is an alternate term for [=numpad=].

		<figure id="figure-numpad">
			<img src="images/numpad.svg" width="606" height="247" alt="Standard Numpad layouts" />
			<figcaption>Standard [=numpad=] Layouts</figcaption>
		</figure>

		The {{KeyboardEvent/code}} values in this section should also be
		used for phone keypads and remote control devices that
		arrange number keys in a grid.

		<figure id="figure-numpad-mobile">
			<img src="images/numpad-mobile.svg" width="135" height="180" alt="Standard mobile keypad layout" />
			<figcaption>Standard Mobile Keypad Layout</figcaption>
		</figure>

		The standard [=numpad=] is sometimes extended with additional keys for
		parentheses, operators, hexadecimal symbols, or calculator functions
		(like KEYCAP{Backspace}). Some of the commonly added keys are listed
		in the table below.

		BEGIN_CODE_TABLE numpad "List of code values for keys in the Numpad section."
			CODE NumLock				On the Mac, the CODE{NumLock} code should be used for the [=numpad=]
										KEYCAP{Clear} key.
			CODE Numpad0				KEYCAP{0 Ins} on a keyboard<br/>KEYCAP{0} on a phone or remote control
			CODE Numpad1				KEYCAP{1 End} on a keyboard<br/>KEYCAP{1} or KEYCAP{1 QZ} on a phone or
										remote control
			CODE Numpad2				KEYCAP{2 &darr;} on a keyboard<br/>KEYCAP{2 ABC} on a phone or remote control
			CODE Numpad3				KEYCAP{3 PgDn} on a keyboard<br/>KEYCAP{3 DEF} on a phone or remote control
			CODE Numpad4				KEYCAP{4 &larr;} on a keyboard<br/>KEYCAP{4 GHI} on a phone or remote control
			CODE Numpad5				KEYCAP{5} on a keyboard<br/>KEYCAP{5 JKL} on a phone or remote control
			CODE Numpad6				KEYCAP{6 &rarr;} on a keyboard<br/>KEYCAP{6 MNO} on a phone or remote control
			CODE Numpad7				KEYCAP{7 Home} on a keyboard<br/>KEYCAP{7 PQRS} or KEYCAP{7 PRS} on a phone
										or remote control
			CODE Numpad8				KEYCAP{8 &uarr;} on a keyboard<br/>KEYCAP{8 TUV} on a phone or remote control
			CODE Numpad9				KEYCAP{9 PgUp} on a keyboard<br/>KEYCAP{9 WXYZ} or KEYCAP{9 WXY} on a phone
										or remote control
			CODE NumpadAdd				KEYCAP{+}
			CODE_OPT NumpadBackspace	Found on the Microsoft Natural Keyboard.
			CODE_OPT NumpadClear		KEYCAP{C} or KEYCAP{AC} (All Clear). Also for use with [=numpads=] that have a
										KEYCAP{Clear} key that is separate from the
										KEYCAP{NumLock} key. On the Mac, the [=numpad=] KEYCAP{Clear} key should always
										be encoded as CODE{NumLock}.
			CODE_OPT NumpadClearEntry	KEYCAP{CE} (Clear Entry)
			CODE_OPT NumpadComma		KEYCAP{,} (thousands separator). For locales where the thousands separator
										is a "." (e.g., Brazil), this key may generate a KEYCAP{.}.
			CODE NumpadDecimal			KEYCAP{. Del}. For locales where the decimal separator is "," (e.g.,
										Brazil), this key may generate a KEYCAP{,}.
			CODE NumpadDivide			KEYCAP{/}
			CODE NumpadEnter
			CODE_OPT NumpadEqual		KEYCAP{=}
			CODE_OPT NumpadHash			KEYCAP{#} on a phone or remote control device. This key is typically found
										below the KEYCAP{9} key and to the right of the KEYCAP{0} key.
			CODE_OPT NumpadMemoryAdd	KEYCAP{M+} Add current entry to the value stored in memory.
			CODE_OPT NumpadMemoryClear	KEYCAP{MC} Clear the value stored in memory.
			CODE_OPT NumpadMemoryRecall	KEYCAP{MR} Replace the current entry with the value stored in memory.
			CODE_OPT NumpadMemoryStore	KEYCAP{MS} Replace the value stored in memory with the current entry.
			CODE_OPT NumpadMemorySubtract	KEYCAP{M-} Subtract current entry from the value stored in memory.
			CODE NumpadMultiply			KEYCAP{*} on a keyboard. For use with [=numpads=] that provide mathematical
										operations (KEYCAP{+}, KEYCAP{-}, KEYCAP{*} and KEYCAP{/}).<br/>Use
										CODE{NumpadStar} for the KEYCAP{*} key on phones and remote controls.
			CODE_OPT NumpadParenLeft	KEYCAP{(} Found on the Microsoft Natural Keyboard.
			CODE_OPT NumpadParenRight	KEYCAP{)} Found on the Microsoft Natural Keyboard.
			CODE_OPT NumpadStar			KEYCAP{*} on a phone or remote control device.
										This key is typically found below the KEYCAP{7} key and to the left of
										the KEYCAP{0} key.<br/>Use CODE{NumpadMultiply} for the KEYCAP{*} key on
										numeric keypads.
			CODE NumpadSubtract			KEYCAP{-}
		END_CODE_TABLE

		For [=numpads=] that provide keys not listed here, a
		{{KeyboardEvent/code}} value string should be created by starting
		with "Numpad" and appending an appropriate description of the key.

	<h3 id="key-function-section">Function Section</h3>

		The <dfn>function section</dfn> runs along the top of the keyboard (above
		the [=alphanumeric section=]) and
		contains the [=function keys=] and a few additional special keys
		(for example, KEYCAP{Esc} and KEYCAP{Print Screen}).

		A <dfn>function key</dfn> is any of the keys labelled KEYCAP{F1} ... KEYCAP{F12}
		that an application or operating system can associate with a custom function
		or action.

		On some keyboards (especially those found on laptops or other
		portable computers), the [=function keys=] (KEYCAP{F1} ...
		KEYCAP{F12}) are defined to have other primary functions (like
		controlling display brightness or audio volume) and require that a
		separate KEYCAP{Fn} key be pressed to make them act as function
		keys. Unfortunately, the primary functions assigned to these keys
		varies widely from one manufacturer to the next. Because of this,
		the {{KeyboardEvent/code}} is always set to the [=function key=]
		name.

		BEGIN_CODE_TABLE function "List of code values for keys in the Function section."
			CODE Escape			KEYCAP{Esc} or KEYCAP{⎋}
			CODE F1				KEYCAP{F1}
			CODE F2				KEYCAP{F2}
			CODE F3				KEYCAP{F3}
			CODE F4				KEYCAP{F4}
			CODE F5				KEYCAP{F5}
			CODE F6				KEYCAP{F6}
			CODE F7				KEYCAP{F7}
			CODE F8				KEYCAP{F8}
			CODE F9				KEYCAP{F9}
			CODE F10			KEYCAP{F10}
			CODE F11			KEYCAP{F11}
			CODE F12			KEYCAP{F12}
			CODE_OPT Fn			KEYCAP{Fn} This is typically a hardware key that does not generate a separate
								code. Most keyboards do not place this key in the [=function section=], but it is
								included here to keep it with related keys.
			CODE_OPT FnLock		KEYCAP{FLock} or KEYCAP{FnLock}. Function Lock key. Found on the Microsoft
								Natural Keyboard.
			CODE PrintScreen	KEYCAP{PrtScr SysRq} or KEYCAP{Print Screen}
			CODE ScrollLock		KEYCAP{Scroll Lock}
			CODE Pause			KEYCAP{Pause Break}
		END_CODE_TABLE

		For keyboards that provide more than 12 [=function keys=], the
		{{KeyboardEvent/code}} value follows the pattern shown above with
		"F" followed by the [=function key=] number - CODE_NOLINK{F13},
		CODE_NOLINK{F14}, CODE_NOLINK{F15}, and so on.

		<p class="note">
		Apple keyboards may have KEYCAP{Eject} or KEYCAP{Power} keys in the
		[=function section=]. The {{KeyboardEvent/code}} values for these
		keys are defined in [[#key-media]].
		</p>

	<h3 id="key-media">Media Keys</h3>

		<dfn>Media keys</dfn> are extra keys added to a keyboard that provide <em>media</em>
		related functionality like play, pause or volume control. These keys do not
		have a standard location on the keyboard so keyboards from different
		manufacturers are likely to have a different arrangement of keys or a
		completely different sets of keys.

		[=Media keys=] are often distinct from
		normal typing keys in appearance and may be recessed in the
		keyboard.

		On laptop keyboards, these keys are often merged with the
		[=function keys=], with the [=media key=] interpretation being
		the primary function of the key and the [=function key=]
		interpretation requiring the KEYCAP{Fn} key to be pressed at the
		same time. In this configuration the {{KeyboardEvent/code}} should
		be set to match the [=function key=] (CODE{F1} ... CODE{F12}).
		When the keys are merged in this fashion, the {{KeyboardEvent/code}}
		values are taken from the [=function key=] value because the
		[=media key=] value is not consistent across keyboards.

		BEGIN_CODE_TABLE media "List of code values for media keys."
			CODE_OPT BrowserBack		Some laptops place this key to the left of the KEYCAP{&uarr;} key.
			CODE_OPT BrowserFavorites
			CODE_OPT BrowserForward		Some laptops place this key to the right of the KEYCAP{&uarr;} key.
			CODE_OPT BrowserHome
			CODE_OPT BrowserRefresh
			CODE_OPT BrowserSearch
			CODE_OPT BrowserStop
			CODE_OPT Eject				KEYCAP{Eject} or KEYCAP{&#9167;}. This key is placed in the [=function
										section=] on some Apple keyboards.
			CODE_OPT LaunchApp1			Sometimes labelled KEYCAP{My Computer} on the keyboard
			CODE_OPT LaunchApp2			Sometimes labelled KEYCAP{Calculator} on the keyboard
			CODE_OPT LaunchMail
			CODE_OPT MediaPlayPause
			CODE_OPT MediaSelect
			CODE_OPT MediaStop
			CODE_OPT MediaTrackNext
			CODE_OPT MediaTrackPrevious
			CODE_OPT Power				This key is placed in the [=function section=] on some Apple keyboards,
										replacing the KEYCAP{Eject} key.
			CODE_OPT Sleep
			CODE_OPT AudioVolumeDown
			CODE_OPT AudioVolumeMute
			CODE_OPT AudioVolumeUp
			CODE_OPT WakeUp
		END_CODE_TABLE

	<h3 id="key-legacy">Legacy, Non-Standard and Special Keys</h3>

		These keys are not found on modern standard keyboards. They are
		listed here for reference purposes.

		BEGIN_CODE_TABLE legacy-modifier "List of code values for legacy modifier keys."
			CODE_OPT Hyper
			CODE_OPT Super
			CODE_OPT Turbo
		END_CODE_TABLE

		&nbsp;

		BEGIN_CODE_TABLE legacy-process "List of code values for legacy process control keys."
			CODE_OPT Abort
			CODE_OPT Resume
			CODE_OPT Suspend
		END_CODE_TABLE

		&nbsp;

		BEGIN_CODE_TABLE legacy-editing "List of code values for legacy editing keys."
			CODE_OPT Again	Found on Sun's USB keyboard.
			CODE_OPT Copy	Found on Sun's USB keyboard.
			CODE_OPT Cut	Found on Sun's USB keyboard.
			CODE_OPT Find	Found on Sun's USB keyboard.
			CODE_OPT Open	Found on Sun's USB keyboard.
			CODE_OPT Paste	Found on Sun's USB keyboard.
			CODE_OPT Props	Found on Sun's USB keyboard.
			CODE_OPT Select Found on Sun's USB keyboard.
			CODE_OPT Undo	Found on Sun's USB keyboard.
		END_CODE_TABLE

		The following keys may be found on non-standard international keyboards.

		BEGIN_CODE_TABLE international "List of code values for keys found on international keyboards."
			CODE_OPT Hiragana	Use for dedicated KEYCAP{ひらがな} key found on some Japanese word processing keyboards.
			CODE_OPT Katakana	Use for dedicated KEYCAP{カタカナ} key found on some Japanese word processing keyboards.
		END_CODE_TABLE

		And finally, the following {{KeyboardEvent/code}} value should only
		be used when the corresponding key does not correspond to any of the
		{{KeyboardEvent/code}} values given elsewhere in this specification.
		This value is appropriate for use with virtual keyboards that do not
		have their keys arranged in a way that corresponds to those on a
		physical keyboard.

		BEGIN_CODE_TABLE special "List of special code values."
		CODE Unidentified	This value code should be used when no other
							value given in this specification is appropriate.
		END_CODE_TABLE

		<p class="warning">
		Conforming implementations MUST only use CODE{Unidentified} as a key code
		when there is no way for the implementation to determine the key code.
		Exposing only this value MUST NOT indicate a conforming implementation.
		</p>

<h2 id="accessibility">Accessibility</h2>

	This specification simply defines a set of values that are valid for use in the
	{{KeyboardEvent/code}} attribute. Thus, it does not introduce any features that have
	accessibility concerns.
	
	The <a href="https://w3c.github.io/apa/fast/checklist.html">FAST checklist</a> has been completed and nothing is applicable to this specification.
	
	A note related to the FAST checklist item: "If technology provides internationalization support".
	This specification inherently defines {{KeyboardEvent/code}} values for keyboards and provides
	human-readable names (like "ShiftLeft", "ControlRight", "AltGr" or "KeyQ").
	
	These special key values are defined as human-readable strings so that code to detect special keys
	can be easier to understand. While these values are not intended to be exposed directly to users,
	there is nothing preventing that. Apps that choose to expose these values would need to determine
	whether or not it is appropriate to translate these strings for presentation (e.g.: presenting
	"Backspace" as "Suppr. arrière" for French users).

<h2 id="i18n">I18n</h2>

	The <a href="https://www.w3.org/International/i18n-drafts/techniques/shortchecklist">short I18n checklist</a>
	has been completed and the following item requires a comment:
	
	* <em>"describes a format or data that is likely to need localisation"</em>:
		This specification defines values that are not intended for display to the user, although there
		is nothing preventing sites from exposing these values. 

<h2 id="security">Security Considerations</h2>

	The <a href="https://www.w3.org/TR/security-privacy-questionnaire/">Security and Privacy Self-Review Questionairre</a>
	has been completed with the following notes:
	
	* <em>2.1 What information might this feature expose to Web sites or other parties, and for what purposes is that exposure necessary?</em>:
		This spec defines a set of valid values for the {{KeyboardEvent/code}} attribute of the various
		key events. This is necessary to provides a platform-independent way of identifying which physical
		key (by location) has been pressed (for example, WASD keys in games).

	* <em>2.17 How does your feature handle non-"fully active" documents?</em>:
		This attribute is only associated with key events, and events are not sent if the document is
		not fully active.

	Security concerns associated with the {{KeyboardEvent/code}} attribute are addressed in the [[UIEvents]]
	specification.
	
<h2 id="privacy">Privacy Considerations</h2>

	The <a href="https://www.w3.org/TR/security-privacy-questionnaire/">Security and Privacy Self-Review Questionairre</a>
	has been completed with the following notes:
	
	* <em>2.6 Do the features in your specification expose information about the underlying platform to origins?</em>:
		The {{KeyboardEvent/code}} attribute contains a platform-independent "scancode" value for the key pressed by the user.
		There are a few special `code` values that can be used to identify particular keyboards.
		For example, `IntlBackslash`, `IntlRo` and `IntlYen`. The user would have to type these keys for
		the information to be exposed.

	* <em>3.5 Legitimate Misuse</em>:
		A site could capture all keypresses and build a map of the values generated by the keyboard. If the
		user types enough values (and doesn't change keyboard), then the site could try to match those values
		against a database of known keyboard layouts to guess the user's current keyboard layout. However,
		that's a concern for the {{KeyboardEvent/key}} attribute itself (defined in the [[UIEvents]] specification) rather than
		something specific to the values defined in this document

	Privacy concerns associated with the {{KeyboardEvent/code}} attribute are addressed in the [[UIEvents]]
	specification.
	
<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	Considerable thanks are due to the following participants of the WebApps
	Working Group for providing substantial material contributions in the
	process of developing this specification.

	Gary Kacmarcik (Google),
	Masayuki Nakano (Mozilla)
