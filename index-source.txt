<link href="./override.css" rel="stylesheet" />
<script defer src="./custom-script.js"></script>
<script src="./backup-script.js"></script>


<pre class="metadata">
Title: 用户界面事件键盘事件 code 属性值(UI Events KeyboardEvent code Values)
Shortname: uievents-code-cn
Level: none
Group: webapps
Status: UD
ED: 
Repository: mangwu/uievents-code-cn
Boilerplate: repository-issue-tracking off, copyright off, property-index off
No Editor: true
Text Macro: DATE 2023年5月12日
Text Macro: LONGSTATUS 翻译草案
!本版本: <a href="https://mangwu.github.io/uievents-code-cn/">https://mangwu.github.io/uievents-code-cn/</a>
!最新提案: <a href="https://w3c.github.io/uievents-code/">https://w3c.github.io/uievents-code/</a>
!上个版本: <a href="http://www.w3.org/TR/2015/WD-uievents-code-20151215/">http://www.w3.org/TR/2015/WD-uievents-code-20151215/</a>
!历史记录: <a href="https://www.w3.org/standards/history/uievents-code">https://www.w3.org/standards/history/uievents-code</a>
!规范反馈: <a href="https://github.com/w3c/uievents-code/issues/">GitHub-w3c-uievents-code-issues</a>
!翻译反馈: <a href="https://github.com/mangwu/uievents-code-cn/issues/">GitHub-mangwu-uievents-code-cn-issues</a>
!实现报告: <a href="https://mangwu.github.io/uievents-code-cn/impl-report.html">https://mangwu.github.io/uievents-code-cn/impl-report.html</a>
!编辑者: 
	<a class="p-name fn u-email email" href="mailto:garykac@google.com">Gary Kacmarcik</a>(Google)
	<a class="p-name fn u-email email" href="mailto:travisleithead@hotmail.com">Travis Leithead</a>(Invited Expert)
!翻译者: 
	<a class="p-name fn u-email email" href="mailto:1185956753@qq.com">mangwu</a>
Abstract:
	<h2 class="no-num no-toc no-ref heading settled" id="abstract-cn">
	<span class="content">摘要</span>
	</h2>
		<p>
		本规范定义了 KeyboardEvent.code 属性的值，并且是用户界面事件规范的一部分 
		[[UIEvents]] 。 <code>code</code> 值包含有关按键事件的信息，
		可用于识别用户按下的物理按键。
		</p>

	<h2 class="no-num no-toc no-ref heading settled" id="sotd-cn">
	<span class="content">文档状态</span>
	</h2>
	<div data-fill-with="status-cn">
		<p><em>
		本节介绍了本文件发布时的状态。
		当前 <abbr title="World Wide Web Consortium">W3C</abbr> 
		出版物列表和本技术报告的最新修订版可在
		<a href="https://www.w3.org/TR/">
		<abbr title="World Wide Web Consortium">W3C</abbr> 技术报告索引
		</a>
		中找到，网址为 https://www.w3.org/TR/ 。
		</em></p>

		<p> 本文件由
		<a href="https://www.w3.org/groups/wg/webapps">网络应用程序工作组</a>
		作为 <strong>编辑草稿</strong> (Editors Draft)发布。 
		<span class="del-content">本文档旨在成为W3C推荐标准</span> 。
		</p>

		<p></p>

		<p> 本文件由
		<a href="https://www.w3.org/groups/wg/webapps">网络应用程序工作组</a>
		作为 <strong>工作草案</strong> (Working Draft)发布。
		欢迎对本规范提出反馈和意见。请使用
		<a href="https://github.com/w3c/uievents-code/issues">GitHub issues</a>
		对源文档进行问题讨论; 请使用
		<a href="https://github.com/mangwu/uievents-code-cn/issues">GitHub issues</a>
		对翻译文档进行问题讨论; 
		官方的问题存档地址为
		<a href="https://lists.w3.org/Archives/Public/public-webapps/">
		public-webapps@w3.org archives
		</a> 。
		</p>

		<p>
		作为编辑草案出版并不意味着
		<abbr title="World Wide Web Consortium">W3C</abbr>
		及其成员的认可。 
		这是一份草案文档，可以随时被其他文档更新、替换或作废。
		本文档不适合被其它正在编写的规范作为引用。
		</p>

		<p> 本文档由一个根据
		<a href="https://www.w3.org/Consortium/Patent-Policy-20200915/">
		<abbr title="World Wide Web Consortium">W3C</abbr> 专利政策</a>
		运作的小组编写。
		<abbr title="World Wide Web Consortium">W3C</abbr>
		保留了一份与该小组可交付成果相关的
		<a href="https://www.w3.org/2004/01/pp-impl/114929/status" rel="disclosure">
		所有可披露专利的公开列表
		</a> ; 该页面还包括公开一份专利的说明。
		对认为包含
		<a 
		href=
		"https://www.w3.org/Consortium/Patent-Policy-20200915/#def-essential">
		基本权利要求
		</a>
		（Essential Claim(s)）的专利有实际了解的个人必须根据
		<a
		href=
		"https://www.w3.org/Consortium/Patent-Policy-20200915/#sec-Disclosure">
		<abbr title="World Wide Web Consortium">W3C</abbr>专利政策第6节
		</a> 
		公开信息。
		</p>

		<p>本文件受
		<a href="https://www.w3.org/2021/Process-20211102/" id="w3c_process_revision-cn">
		2021 11月2日 W3C处理文档</a> 规范管理。
		</p>
  </div>
</pre>

<pre class="biblio">
{
	"ISO9995-1": {
		"href": "http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51645",
		"title": "ISO/IEC 9995-1:2009 Information technology -- Keyboard layouts for text and office systems -- Part 1: General principles governing keyboard layouts",
		"publisher": "ISO"
	},
	"ISO9995-8": {
		"href": "http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51641",
		"title": "ISO/IEC 9995-8:2009 Information technology -- Keyboard layouts for text and office systems -- Part 8: Allocation of letters to the keys of a numeric keypad",
		"publisher": "ISO"
	},
	"USB-HID": {
		"href": "https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf",
		"title": "USB HID Usage Tables 1.12",
		"publisher": "USB Implementers' Forum"
	}
}
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/uievents/#interface-; type: interface; spec: uievents;
	text: KeyboardEvent
urlPrefix: https://www.w3.org/TR/uievents/#dom-keyboardevent-; type: attribute; for: KeyboardEvent; spec: uievents;
	text: key
	text: code
	text: location
url: https://www.w3.org/TR/uievents/#key-legends; type: dfn; spec: uievents-key;
	text: key cap
url: https://www.w3.org/TR/uievents-key/#key-attr-values; type: dfn; spec: uievents-key;
	text: key attribute value
</pre>

<pre class="include">
path: stylesheet-extra.include
</pre>

<h2 id="introduction">简介</h2>

	本文档概述了各种键盘布局，并指定了每个键应使用的 {{KeyboardEvent/code}} 值。
	与 [[UIEvents key]] 中描述的 {{KeyboardEvent/key}} 值不同， 
	{{KeyboardEvent/code}} 值仅基于键在键盘上的物理位置，
	不会因用户的当前区域设置而变化。

	此规范以前的规范标题为 <em>DOM Level 3 {{KeyboardEvent/code}} Values</em> 。

	<h3 id="style-conventions">格式规约</h3>

		本规范遵循以下规约: 

		* 打印在 <a href="https://mangwu.github.io/uievents-cn/#key-legends">
			<em>键帽</em></a> 上的键显示为 KEYCAP{&darr;}， KEYCAP{=} 或 KEYCAP{Q} 。
			这用于从用户的角度引用键，而不考虑生成的 {{KeyboardEvent}} 事件中的 
			{{KeyboardEvent/key}} (键) 和 {{KeyboardEvent/code}} (键码)。

		* 代表字符的字形(Glyphs)显示为: GLYPH{&#x239C2;}。

		* Unicode 码点( [=code points=] ) 显示为: UNI{U+003D} 。

		* 有效的键属性值( [=key attribute values=] )，即 {{KeyboardEvent/key}} 
			属性值显示为: KEY{ArrowDown}，KEY_NOLINK{=}，KEY_NOLINK{q} 或 
			KEY_NOLINK{Q}。

		* 有效的 [=按键码属性值=] ，即 
			{{KeyboardEvent/code}} 属性值显示为: CODE{ArrowDown}，CODE{Equal} 或 
			CODE{KeyQ}。
		
		<p class="note custom-note">
		在 <a href="https://mangwu.github.io/uievents-cn/#style-conventions">
		UIEvents</a> 规范本体的格式规约中，也对键帽，字符，代码点和键，
		键值的属性值进行了说明，但是渲染显示不一样，本规范中的渲染会更显眼。
		</p>

<h2 id="keyboard-layout">键盘布局</h2>

	<em>本节不是规范的。</em>

	字母数字键盘是用户生成键盘事件的最常见方式。本节概述了标准键盘及其物理布局。

	<p class="note custom-note">
	<q>键盘布局(keyboard layout)是指以按键、或键上图例来表示任何特定之机械、
	视觉或功能的键盘布局方式; 或则是在计算机、
	打字机或其它字体排版键盘等之类似设备、
	以其键之关系含义结构在键盘上表现的布局方式</q> —— 
	<a href="https://zh.wikipedia.org/wiki/%E9%94%AE%E7%9B%98%E5%B8%83%E5%B1%80">
	zh.wikipedia.org
	</a> 
	</p>

	<h3 id="keyboard-common-layouts">标准键盘布局</h3>

		本节介绍了常见键盘上的物理布局。

		<h4 id="keyboard-sections">键盘分区</h4>

			在讨论键盘布局时，将标准键盘划分为不同的区域并标记每一行会更方便讨论布局。

			<div class="figure-change"  data-content="images/keyboard-sections">
			<div class="custom-tabs-nav-wrap">
					<div class="custom-tabs-nav-list">
							<div data-node-key="1" class="custom-tabs-tab custom-tabs-tab-active">
									<div class="custom-tabs-tab-btn" tabindex="0">汉化图</div>
							</div>
							<div data-node-key="2" class="custom-tabs-tab">
									<div class="custom-tabs-tab-btn" tabindex="0">原图</div>
							</div>
					</div>
			</div>
			<figure id="figure-keyboard-sections-zh">
				<img src="images/keyboard-sections-zh.svg" width="684" height="225"
					alt="标准键盘的五个通用区域" />
				<figcaption>标准键盘的五个通用区域</figcaption>
			</figure>
			<figure id="figure-keyboard-sections" class="figure-hidden">
				<img src="images/keyboard-sections.svg" width="684" height="225"
					alt="标准键盘的五个通用区域" />
				<figcaption>标准键盘的五个通用区域</figcaption>
			</figure>
			</div>

			<p class="note custom-note">
			注意，如果包括功能相同的按键(如 KEYCAP{ControlLeft} 和 
			KEYCAP{ControlRight} )，上图共有 <code>104</code> 个物理按键。
			</p>

			这些键盘区域包括:

			*	[=字母数字区域=] 是键盘的主要部分，
				也是大多数键盘变化发生的地方。当用户选择一种键盘布局时，
				受影响最大的是此区域中的物理按键。
			*	[=控制板=] 区域和 [=箭头板=] 区域包含箭头按键和其他编辑按键。
			*	[=数字板=] (也称为"数字 [=小键盘=] "或"数字键盘")区域
				包含数字和数学按键键，使输入数字数据更容易。
			*	最后， [=功能区域=] 包含各种 [=功能键③=] 和特殊按键，如 KEYCAP{Escape} 。

			为了更容易识别按键，键盘上的行的名称从最下面一行的 "A" 开始，
			到最上面一排的 "E" 。 [=功能区域=] 中的键行被认为在 
			"K" 行中。这些行名称与 [[ISO9995-1]] 规范中给出的行名称一致。

			请注意，许多键盘(包括现代键盘和传统键盘)都有多余的键，
			这些键没有整齐地放入上面的区域。其中一些键包含在[[#key-media]]。

		<h4 id="keyboard-101">标准 "101" 键盘布局</h4>

			标准的 "101" 键盘(通常称为"US 布局")是唯一一种在单行 KEYCAP{Enter} 
			(字面数字区域上的 KEYCAP{Enter} )键上方有 CODE{Backslash} 键(键帽标签为 
			KEYCAP{\|})的布局。所有其他布局都省略了此键，并展开 KEYCAP{Enter} 
			键以占据两行。

			<figure id="figure-keyboard-101-us">
				<img src="images/keyboard-101-us.svg" width="684" height="225" 
				alt="标准 '101' 键盘布局" />
				<figcaption>标准 "101" 键盘布局，展示未修改过的美式按键值</figcaption>
			</figure>

			现代标准的 "101" 布局键盘实际上包含 104 个键: [=字母数字区域=] 有 61 
			个按键， [=数字板=] 、 [=控制板=] 、 [=箭头板=] 和 [=功能区域=] 有 43 
			个键。这个键盘布局的 "101" 名称可以追溯到这个标准键盘实际上包含 101 
			个键的时候。两个 KEYCAP{Meta} 按键(通常被赋予为特定于操作系统的标签)和 
			KEYCAP{Menu} 键是后来被添加，使按键总数达到了 104 个。

			<p class="note custom-note">
			左边的 KEYCAP{Meta} 按键的键帽标签通常有两种，一种是微软的 Windows 
			操作系统的 KEYCAP{⊞} ( KEYCAP{Windows} )，一种是苹果操作系统的 
			KEYCAP{⌘} ( KEYCAP{Command} )。现代键盘上的 KEYCAP{Menu} 
			键的键帽标签通常为 KEYCAP{≣} (见 [=应用程序键=] )。
			</p>

		<h4 id="keyboard-101alt">备用 "101" 键盘布局</h4>

			备用 "101" 键盘有一个大的 KEYCAP{Enter} 键，并缩小了 KEYCAP{Backspace} 
			键，为 CODE{IntlYen} 键腾出空间(它取代了标准 101 键盘布局中的 
			CODE{Backslash} 键)。 CODE{IntlYen} 名称来自日式键盘布局，表示 
			KEYCAP{¥} (也就是日元 PHONETIC{yen} 的符号)键——同样，
			俄式键盘布局和日式键盘布局类似，只不过这个 KEYCAP{¥} 键，映射了 
			KEYCAP{\/} 键，如下图像所示: 

			<figure id="figure-keyboard-101-russian">
				<img src="images/keyboard-101-russian.svg" width="684" height="225" 
				alt="备用 '101' 键盘布局" />
				<figcaption>
				备用 "101" 键盘布局，展示未修改过的俄式按键值
				</figcaption>
			</figure>

			现代的备用 "101" 布局的键盘包含104个键: [=字母数字区域=] 有 61 个按键，
			[=数字板=] 、[=控制板=] 、 [=箭头板=] 和 [=功能区域=] 有 43 个键。
			
			<p class="note custom-note">
			<a href=
			"https://zh.wikipedia.org/wiki/%E9%94%AE%E7%9B%98%E5%B8%83%E5%B1%80">
			维基百科</a> 上有关于日文假名键盘和韩文键盘的 [=字母数字区域=] 
			的图示，但是它们不属于备用 "101" 
			键盘布局，因为除了和俄式键盘一样多了一个 CODE{IntlYen} 键之外，
			修饰符按键还有区别，继续阅读下面的章节了解更多。
			</p>

		<h4 id="keyboard-102">标准 "102" 键盘布局</h4>

			标准的 "102" 键盘在整个欧洲都很常见，它在 "101" 
			键盘布局中添加了一个不存在的键: 在左移键( KEYCAP{Shift} )旁边添加了 
			CODE{IntlBackslash} 键(在英式键盘上键帽标签为 KEYCAP{\|} )。

			还添加了第二个键(在英式键盘上键帽标签为 KEYCAP{#~} )，该键部分藏在 
			KEYCAP{Enter} 键下。该键被编码为 CODE{Backslash} ，使用与 "101" 
			键盘布局中的 KEYCAP{\|} 键相同的编码。根据 [[USB-HID]] 规范，美式的 
			KEYCAP{\|} 和英式的  KEYCAP{#~} 实际上是两个独立的键(分别命名为"键盘 
			\ 和 |"以及"键盘非美式的 # 和 ~”），
			但由于这两个键从未同时出现在同一键盘上，大多数平台对两个键使用相同的扫描码
			(scancode)，因此很难区分。正是由于这个原因，这两个键都使用了码值 
			CODE{Backslash} 。

			<figure id="figure-keyboard-102-uk">
				<img src="images/keyboard-102-uk.svg" width="684" height="225" 
				alt="标准 '102' 键盘布局" />
				<figcaption>标准 "102" 键盘布局，展示未修改过的英式按键值</figcaption>
			</figure>

			现代 "102"布局的键盘包含105个键: [=字母数字区域=] 有 62 个按键，
			[=数字板=] 、 [=控制板=] 、 [=箭头板=] 和 [=功能区域=] 有 43 个键。

			<p class="note custom-note">
			按照 <code>code</code> 属性值进行区分，美式 "101" 键盘布局在占用单行 
			KEYCAP{Enter} 上方的 KEYCAP{\|} 键，和 英式 "102" 键盘布局在占用双行的 
			KEYCAP{Enter} 下方的 KEYCAP{#~} 键实际上指代同一个 <code>code</code> 值，
			即 CODE{Backslash}。英式 "102" 多出来的那个位于 KEYCAP{ShiftLeft} 和 
			KEYCAP{Z} 之间的按键，虽然键帽是 KEYCAP{\|} (和美式的占用单行 
			KEYCAP{Enter} 上方的 KEYCAP{\|} 键键帽相同)，但是 <code>code</code> 
			属性值却是 CODE{IntlBackslash} 。<br/>
			上述图示中的 KEYCAP{#~} 按键和 KEYCAP{\|} 按键没有显示完整键帽
			(实际上其它按键也没有，主要显示了 <code>code</code> 值)，
			下面是源于维基百科的一个英式 "102" 字母数字区域( [=字母数字区域=]  
			)键盘布局图示:
			</p>

			<figure id="figure-keyboard-alphanumeric-uk">
				<img src="images/keyboard-alphanumeric-uk.svg" width="684" height="225" 
				alt="标准 '102' 字母数字区域键盘布局" />
				<div class="custom-figcaption">英式标准 "102" 字母数字区域键盘布局，
				展示未修改过的英式键帽值</div>
			</figure>

		<h4 id="keyboard-103">韩式 "103" 键盘布局</h4>

			韩语 "103" 键盘基于备用 "101" 键盘布局，并添加了两个额外的键
			(空格键两侧各一个)来处理韩语特定的输入模式。这两个按键是 CODE{Lang2} 
			("Hanja"，键帽为 KEYCAP{한자} ，发音为 PHONETIC{hanja} )和 CODE{Lang1}
			("HangulMode"，键帽为 KEYCAP{한/영} ，发音为 PHONETIC{han/yeong} ) 。

			<p class="note custom-note">
			实际上 KEYCAP{한자} (Hanja) 也就是汉字的意思，这里表示朝鲜汉字，而
			KEYCAP{한/영} (HangulMode) 也就是韩/英，
			这里表示韩文模式和英文模式切换使用。
			</p>

			<figure id="figure-keyboard-103-korean">
				<img src="images/keyboard-103-korean.svg" width="684" height="225" 
				alt="韩式 '103' 键盘布局" />
				<figcaption>韩式 "103" 键盘布局，展示未修改过的韩式按键值</figcaption>
			</figure>

			现代 "103" 布局的键盘包含106个键: [=字母数字区域=] 有66个按键，
			[=数字板=] 、 [=控制板=] 、 [=箭头板=] 和 [=功能区域=] 有 43 个键。

		<h4 id="keyboard-104">巴西 "104" 键盘布局</h4>
			巴西使用的 "104" 布局增加了4个新键: "102" 布局中的两个键( CODE{Backslash} 
			和 CODE{IntlBackslash} )加上 CODE{IntlRo} 键(右移键 CODE{ShiftRight} 
			旁边)和 [=数字板=] 上的一个额外键。这个 [=数字板=] 上的新按键被称为 
			CODE{NumpadComma} (数字键盘逗号)，因为它代表千位分隔符。
			在巴西键布局上，这个按键键帽标签为 KEYCAP{.} ，并且 CODE{NumpadDecimal} 
			键被键帽标签为 KEYCAP{,} 。

			<figure id="figure-keyboard-104-brazilian">
				<img src="images/keyboard-104-brazilian.svg" width="684" height="225" 
				alt="标准 '104' 键盘布局" />
				<figcaption>标准 "104" 键盘布局，展示未修改过的巴西按键值</figcaption>
			</figure>

			现代 "104" 布局的键盘包含107个键: [=字母数字区域=] 有63个按键，
			[=数字板=] 、 [=控制板=] 、 [=箭头板=] 和 [=功能区域=] 有 44 个键。
			一些巴西键盘的 [=小键盘=] 上( [=数字板=] )没有额外的按键，只有106个键。

			<p class="note custom-note" id="keyboard-104-note">
			巴西的键盘以 "102" 键盘布局为基础，从 <code>code</code> 值上看，和 "102"
			键盘布局相同 <code>code</code> 值的两个按键(位于大 KEYCAP{Enter} 下方的
			CODE{Backslash} 和在 KEYCAP{ShiftLeft} 和 KEYCAP{Z} 之间的 
			CODE{IntlBackslash} )具有异同的键帽标签，前者( CODE{Backslash} 
			)的键帽在巴西键盘和英式 "102" 键盘分别是 KEYCAP{]&#125;} 和 KEYCAP{#~}，
			后者( CODE{IntlBackslash} )的键帽在巴西键盘和英式 "102" 键盘 
			<strong>都是</strong> KEYCAP{\|} 。除此之外，<code>code</code> 值为
			CODE{IntlRo} 的额外按键的键帽标签为 KEYCAP{/?} ，
			下面的日式键盘中也包含这个键。<br/> 最后，在 [=数字板=] 
			上可能多的一个额外按键表示千位分隔符，它的 <code>code</code> 值为 
			CODE{NumpadComma} ，要理解这个额外按键的意义，需要理解的背景是: 
			不同国家的数字写法不同，常见的就是小数点使用 KEYCAP{.} ，千位分隔符使用 
			KEYCAP{,} ，但是国际化标准组织表示小数点是可以使用实心点或者逗号，
			所以有些地区小数点使用 KEYCAP{,} ，而千位分隔符使用 KEYCAP{.} 
			(正好颠倒了)。以葡萄牙和葡萄牙语地区为例，
			中文数字四千五百六十七点八九使用阿拉伯数字和分隔符号表示为 4.567,89 或 
			4 567,89 (手写可能是 4·567,89 )，而美国地区为 4,567.89 或旧写法 4,567·89 。
			所以在巴西键盘(葡萄牙语地区)的 CODE{NumpadComma} 按键的键帽标签为 
			KEYCAP{.} ，而原本作为小数点分隔符号的 CODE{NumpadDecimal} 
			按键的键帽标签也从 KEYCAP{. Del} 变成了 KEYCAP{,} ，
			并且在巴西键盘实际输入当地语言的时候，
			按下这两个按键生成的字符和键帽是对应的。<br/>
			规范给出的巴西 "104" 键盘未显示完整的键帽(上图主要显示 <code>code</code> 
			值)，下面是来自维基百科的巴西葡萄牙字母数字键盘的图示:
			</p>

			<figure id="figure-keyboard-alphanumeric-brazil">
				<img src="images/keyboard-alphanumeric-brazil.svg" width="684" height="225" 
				alt="巴西 '104' 字母数字区域键盘布局" />
				<div class="custom-figcaption">巴西 "104" 字母数字区域键盘布局，
				展示未修改过的巴西键帽值</div>
			</figure>

		<h4 id="keyboard-106">日式 "106" 键盘布局</h4>
			
			日语 "106" 键盘布局在标准 "101" 键盘布局的基础上修改了一个按键: 

			*	如标准 "102" 键盘布局描述的那样，占用一行的 KEYCAP{Enter} 键上方的 
				<code>code</code> 值为 CODE{Backslash} 的按键被移动到了占用两行的 
				KEYCAP{Enter} 键下方的 KEYCAP{]む} ;
			
			增加了5个新键: 

			*	如备用 "101" 键盘布局的描述那样，<code>code</code> 值为 CODE{Backspace} 
				的按键缩小，为 CODE{IntlYen} (键帽标签为 KEYCAP{¥_} ) 腾出空间; 
			
			*	如巴西 "104" 键盘布局的描述那样，<code>code</code> 值为 CODE{ShiftRight}
				的按键缩小，为 CODE{IntlRo} (键帽标签为 KEYCAP{\ろ} ) 腾出空间; 
			
			*	如韩式 "103" 键盘布局的描述那样，空格键(键帽标签为 KEYCAP{&nbsp;}，
				<code>code</code> 值为 CODE{Space} )被缩小，为三个输入模式(input mode)
				按键腾出空间: 

				*	KEYCAP{&nbsp;} (空格键)左边是 <code>code</code> 值为 CODE{NonConvert} ，
					键帽标签为 KEYCAP{無変換}，发音为 PHONETIC{muhenkan} 的按键。

					<p class="note custom-note">
					GLYPH{無変換} 的意思就是无变换，无变换键的功能是转换假名。
					在光标闪烁的状态下按无变换键可以把输入模式(默认上屏的假名类型)
					从全角平假名切换到全角片假名，再按则切换到半角片假名
					(全角かな→全角カナ→半角カナ)。除了切换模式以外，
					也可以实现输入中的内容的假名转换。关于日语的假名及其输入，请自行查阅
					<a href="https://zh.wikipedia.org/wiki/%E5%81%87%E5%90%8D_(%E6%96%87%E5%AD%97)">
					维基百科</a> 。
					</p>
				
				*	KEYCAP{&nbsp;} (空格键)右边是 <code>code</code> 值为 CODE{Convert} ，
					键帽标签为 KEYCAP{変換} ，发音为 PHONETIC{henkan} 的按键。

					<p class="note custom-note">
					GLYPH{変換} 的意思就是变换，变换键的功能是把输入的假名转汉字。
					这一点和空格键的功能是一样的(因此平常都习惯按空格)。
					所不同的是变换键还有重新转换( GLYPH{再変換} )的功能。
					写文章的时候如果你发现有打错同音字词( GLYPH{誤変換} )
					的时候用光标选定文字，然后再按一下变换键就可以重新选词修改。
					非日语键盘(如中国普遍采用的美式键盘)默认可以用 KEYCAP{Windows} + 
					KEYCAP{/} ( CODE{MetaLeft} + CODE{Slash} )来代替变换键。
					</p>

				*	KEYCAP{変換} 右边是 <code>code</code> 值为 CODE{KanaMode} ，键帽标签为
					KEYCAP{カタカナ/ひらがな/ローマ字} ，发音为 
					PHONETIC{katakana/hiragana/romaji} 的按键。

					<p class="note custom-note">
					GLYPH{カタカナ/ひらがな/ローマ字} 的意思就是 片假名/平假名/罗马字，
					需要配合 KEYCAP{Shift} 和 KEYCAP{Alt} 键来使用: 
					<br/>
					① 单独按这个键，切换回默认的平假名输入模式; <br/>
					② KEYCAP{Shift} + KEYCAP{カタカナ/ひらがな/ローマ字} ，
					切换回片假名输入模式; <br/>
					③  KEYCAP{Alt} + KEYCAP{カタカナ/ひらがな/ローマ字} ，
					切换回罗马字输入模式; <br/>
					</p>

			<figure id="figure-keyboard-106-japanese">
				<img src="images/keyboard-106-japanese.svg" width="684" height="225" 
				alt="标准 '106' 键盘布局" />
				<figcaption>标准 "106" 键盘布局，展示未修改的日语键值
				</figcaption>
			</figure>

			现代 "106" 布局的键盘包含109个键: [=字母数字区域=] 有66个按键，
			[=数字板=] 、 [=控制板=] 、 [=箭头板=] 和 [=功能区域=] 有 43 个键。

			<p class="note custom-note">
			上面的图示虽然完整显示了按键 <code>code</code> 值，
			但是字母数字区域没有显示每个按键的完整键帽。
			日本国内多使用JIS标准的键盘布局，也称为日文假名键盘，
			源自维基百科的图示如下:
			</p>

			<figure id="figure-keyboard-alphanumeric-japanese">
				<img src="images/keyboard-alphanumeric-japanese.svg" 
				width="684" height="225" 
				alt="日式 '106' 字母数字区域键盘布局" />
				<div class="custom-figcaption">日式 "104" 字母数字区域键盘布局，
				展示未修改过的日本键帽值</div>
			</figure>

		<h4 id="keyboard-mac">苹果键盘布局</h4>

			一般来说，苹果键盘的布局与 PC 键盘相同，但如下图所示，存在一些差异。

			<figure id="figure-keyboard-mac">
				<img src="images/keyboard-mac.svg" width="684" height="225" 
				alt="苹果扩展键盘布局" />
				<figcaption>苹果扩展键盘布局，展示未修改的英文键值</figcaption>
			</figure>

			在此图中，绿色键表示已移动到新位置的键，而蓝色键表示已添加的键。

			<p class="note custom-note">
			本节没有讨论很多关于苹果标准键盘的内容，可以参考维基百科-
			<a href="https://en.wikipedia.org/wiki/Apple_keyboards">
			Apple_keyboards</a> 查阅更多内容。下面是在苹果标准键盘上，
			一些键帽显示为特殊符号并与 PC 键盘进行对比的 <strong>非规范表格</strong>:
			</p>

			++----------------------------------------+---------------+------------------+-------------------+
			=| code 值                                | Mac 特殊符号  | Mac 键帽         | PC 特殊符号或键帽 |
			 +----------------------------------------+---------------+------------------+-------------------+
			+| CODE{MetaLeft} / CODE{MetaRight}       | KEYCAP{⌘}     | KEYCAP{Command}  | KEYCAP{⊞}        |
			+| CODE{ControlLeft} / CODE{ControlRight} | KEYCAP{⌃}     | KEYCAP{Control}  | KEYCAP{Ctrl}      |
			+| CODE{AltLeft} / CODE{AltRight}         | KEYCAP{⌥}     | KEYCAP{Option}   | KEYCAP{Alt}       |
			+| CODE{ShiftLeft} / CODE{ShiftRight}     | KEYCAP{⇧}     | KEYCAP{Shift}    | KEYCAP{Shift}     |
			+| CODE{CapsLock}                         | KEYCAP{⇪}     | KEYCAP{CapsLock} | KEYCAP{CapsLk}    |
			+| CODE{Escape}                           | KEYCAP{⎋}     | KEYCAP{Esc}      | KEYCAP{Esc}       |
			+| CODE{Backspace}                        | KEYCAP{⌫}     | KEYCAP{Delete}   | KEYCAP{Backspace} |
			+++---------------------------------------+---------------+------------------+-------------------+


		<h4 id="keyboard-laptops">笔记本电脑键盘布局</h4>

			笔记本电脑键盘上可用的空间有限，
			这通常意味着需要调整物理按键布局以适应所有所需的键。
			[=字母数字区域=] 中的 [=书写系统键=] 往往保持完整，
			但其他键盘区域通常与其他键组合或被完全移除。

			<figure id="figure-keyboard-laptop-mac">
				<img src="images/keyboard-laptop-mac.svg" width="684" height="225" 
				alt="苹果笔记本电脑键盘布局" />
				<figcaption>苹果笔记本电脑键盘布局</figcaption>
			</figure>

			在这个苹果笔记本电脑键盘中，右侧的控制键( CODE{ControlRight} )被移除，
			为半行高箭头键腾出了空间，左侧增加了一个 KEYCAP{Fn} 键。

			<p class="note custom-note">
			右上方增加了一个电源按键。
			</p>

			<figure id="figure-keyboard-laptop">
				<img src="images/keyboard-laptop.svg" width="684" height="225" 
				alt="PC 笔记本电脑键盘布局示例" />
				<figcaption>PC 笔记本电脑键盘布局示例</figcaption>
			</figure>

			PC 笔记本电脑键盘差异很大，但这个示例键盘展示了一些常见的键盘布局。
			[=控制板=] 区域按键沿右侧添加， [=箭头板=] 区域按键沿底部插入。右 KEYCAP{Shift} 键通常会收缩，为向上箭头键( 
			KEYCAP{↑} )腾出空间，而右 KEYCAP{Meta} 键通常会被完全移除。

		<h4 id="other-locales">其它地区的键盘布局</h4>

			本规范中没有明确描述其它地区的键盘布局，
			因为它们通常从一个现有键盘布局出发，并通过更改键帽和键映射对其进行调整。

			因为这些键盘不引入新的物理键，所以它们不需要明确的文档进行描述。

			这些键盘通常基于 "101" (标准或备用) 或 "102" 布局。例如，常见的阿拉伯语、
			西里尔语、希腊语、印地语、高棉语和泰语键盘都基于 "101" 或 "102" 键盘布局。

		<h4 id="keyboard-chinese">中文键盘</h4>

		<em><strong>本节不是规范的，并且不属于源英文原档规范。</strong></em>

		<q>中国大陆由于以基于拉丁字母的汉语拼音为主要输入法，故不使用专用的中文键盘，
		而使用美式标准键盘布局，少部分键盘会在键帽上加印五笔字根。</q> —— 
		<a href="https://zh.wikipedia.org/wiki/键盘布局#中文「四合一」鍵盤">
		维基百科</a> 

		而在使用注音或其它非拼音输入法的地区(台湾、香港及澳门等地)，
		使用一种叫做中文"四合一"键盘，它同样基于美式标准 "101" 键盘，
		只不过在字母数字区域的按键键帽上有四个表示不同意思的字符标签: <br>

		*	每个键的左上角是美式标准布局键盘键帽标签;

		*	每个键的右上角是注音符号; 

		*	每个键的左下角是仓颉输入法字符;

		*	每个键的右下角是大易输入法字符;

		下图是源于维基百科的一个中文"四合一"键盘:
		
		<figure id="figure-keyboard-cn-taiwan">
			<img src="images/keyboard-101-cn-taiwan.svg" width="684" height="225" 
			alt="台湾地区中文'四合一'键盘字母数字区域" />
			<div class="custom-figcaption">台湾地区中文"四合一"键盘字母数字区域</div>
		</figure>


	<h3 id="keyboard-mobile">移动设备键盘</h3>

		在内容作者希望依赖一个移动设备键盘(mobile keypad)的机械布局的情况下，
		本规范建议使用 [[ISO9995-8]] 标准中指定的键盘配置，
		该标准定义了一种数字键盘布局(numeric keypad layout)和在 UNI{U+0061}
		... UNI{U+007A}( GLYPH{a} - GLYPH{z} ) 到数字按键 KEYCAP{2} - KEYCAP{9} 
		范围内的 Unicode 字符的二次分派，(该布局)常作为一种适用于某些国际用途的布局。

		<p class="note">
		这种键盘布局，尤其是字母的分布，适用于英语设备，
		与许多(非英语)用户的键盘或配置不匹配。
		内容作者不能依赖任何特定的配置，并且应该以国际化和本地化的方式创建内容。
		</p>

		<figure id="figure-numeric-keypad">
			<img src="images/mobile-keypad.svg" width="140" height="305"
			alt="移动设备键盘布局" />
			<figcaption>通用移动键盘的图形描述</figcaption>
		</figure>

		<p class="note custom-note">
		现代的移动设备多为智能手机，不再具有上图所示的物理键盘，而是使用触摸屏幕，
		通过虚拟键盘( [[#keyboard-chording-virtual]] )进行文本输入。下图是苹果公司发布的 IPhone 14 智能手机:
		</p>

		<figure id="figure-iphone14">
			<img src="images/IPhone-14-vector.svg" width="140" height="305"
			alt="IPhone14 正面图" />
			<div class="custom-figcaption">IPhone14 正面图，灰色区域为触摸屏，
			不包含物理键盘，上方"刘海" 包含前置摄像头</div>
		</figure>

	<h3 id="remote-control">媒体遥控器</h3>

		许多键盘包含控制媒体功能的特殊键。越来越多的媒体设备，尤其是电视，
		都支持网络。混合键盘/遥控设备(Hybrid keyboard/remote-control devices)
		越来越普遍。为了满足这些混合 Web/媒体 设备的需求，
		本规范定义了除传统键盘键外，常见的遥控器按钮(remote control buttons)。

		由于尺寸较小，遥控器上的按键(或按钮)通常是模态的，
		一个按键根据屏幕内容的上下文执行不同的功能。此外，
		许多键用作切换键(toggles)，在两个或多个状态之间来回切换(请参见切换按键)。
		这些遥控器按钮通常没有修饰符状态，因此每个按钮都被分配了一个功能
		(如 KEYCAP{Play} 、 KEYCAP{Pause} 、 KEYCAP{Up} 、 KEYCAP{Menu} 或 
		KEYCAP{Exit} )。

		<figure id="figure-media-remote-control">
			<img src="images/remote-control.svg" width="102" height="422" 
			alt="媒体遥控器示例" />
			<figcaption>媒体遥控器的图形描述</figcaption>
		</figure>

	<h3 id="keyboard-chording-virtual">虚拟键盘和和弦键盘</h3>

		虚拟键盘(virtual keyboards)是一组基于软件的按键集合，有各种不同的排列方式，
		通常出现在触摸屏设备上。它们通常是模态的(modal)，
		能够在不同的动态键集之间切换，例如字母键、数字键或符号键。由于缺乏物理限制，
		这些键盘 <span class="zh-upper">可以</span> 呈现最广泛的字符，
		包括表情符号和其他符号。然而，在可能的情况下，虚拟键盘 
		<span class="zh-upper">应当</span> 生成正常范围的键盘事件和 
		<code>code</code> 值，以便于开发并与现有内容兼容。

		<p class="note custom-note">
		关于模态的解释，参考 AI 的回答，但不保证准确: <br/>
		<q>如果你说键盘按键是 <strong>模态的</strong> ，
		那么通常是指这些按键的行为和反应是由软件程序控制的，而不是物理结构本身。
		在模态键盘中，按键的行为和反应是根据用户的输入来决定的，
		而不是按键本身的物理结构。<br/>
		模态键盘通常被设计为可以响应不同类型的输入，例如按压、轻触、点击等，
		以提供更自然、直观的输入体验。模态键盘中的按键可以根据用户的输入来变化，
		例如在按下一个按键时，按键的状态会从“松开”变为“按下”，
		并且可能会产生轻微的震动或声音反馈，以增强用户的操作感受。 <br/>
		因此，将键盘按键视为模态的，主要是基于其行为和反馈的变化，
		而不是按键物理结构本身。</q> —— 
		<a href="https://yiyan.baidu.com/">文心一言</a> 。
		</p>

		<p class="note custom-note">
		虚拟键盘依靠的软件也就是输入法编辑器(input method editor)，详情参见 
		[[UIEvents]] 中的 <a href="https://mangwu.github.io/uievents-cn/#keys-IME">
		输入法编辑器</a> 。下图是一个拼音输入法编辑器软件(微软操作系统自带的):
		</p>
		
		<figure id="figure-input-method-editor">
			<img src="images/microsoft-pinyin-input-method-editor.svg" 
			width="750" height="200" 
			alt="拼音输入法编辑器" />
			<div class="custom-figcaption">拼音输入法编辑器</div>
		</figure>

		和弦键盘(Chording keyboards)，也称为弦键组(chorded keysets)或和弦键盘
		(chord keyboards)，是一种键输入设备，通过组合或顺序按下几个键来产生值，
		通常是为了在一组缩小的键上模拟全范围的字符或命令，并且可以单手使用。
		和弦键盘 <span class="zh-upper">可以</span> 有额外的模式键来在键值之间切换，
		并且键按下时产生的键值的数量和类型会有所不同，
		但这种键盘最终产生的键值 <span class="zh-upper">应当</span> 
		与本规范中描述的键值范围相匹配。

		对于这些和其他备用模态键盘，在不同模式之间进行切换的并被
		<span class="zh-upper">推荐的</span> 的按键的 {{KeyboardEvent/key}} 值:
		KEY{Alphanumeric} ， KEY{CapsLock} ， KEY{NumLock} 和 KEY{SymbolLock} 。

		<p class="note custom-note">
		更多关于和弦键盘的内容，参阅英文维基百科的 
		<a href="https://en.wikipedia.org/wiki/Chorded_keyboard">
		Chorded keyboard</a> 。
		</p>
	
	<h3 id="wiki-keyboard-sections">非标准键盘分区</h3>

		<strong>本节不是规范的，并且不属于源英文原档规范。</strong>

		本规范在键盘分区时，将标准键盘分为 5 个通用区域，
		这种分类方式主要基于按键的位置。

		对于一般的标准计算机的键盘(也称 PC/AT 键盘， QWEWRTY 键盘)
		维基百科介绍了一种基于按键的用途进行分类的方式，包括 [[#wiki-fun-keys]] 、
		[[#wiki-alnum-keys]] 、 [[#wiki-enter-edit-keys]] 、 
		[[#wiki-system-and-gui-keys]] 、 [[#wiki-num-keypad-keys]] 、 
		[[#wiki-lock-keys]] 、 [[#wiki-nav-keys]] 、 [[#wiki-modifier-keys]] 。
		如下美式标准 "101" 键盘布局按功能分区的图示:

		<div class="figure-change"  data-content="images/wiki-keyboard-sections">
			<div class="custom-tabs-nav-wrap">
					<div class="custom-tabs-nav-list">
							<div data-node-key="1" class="custom-tabs-tab custom-tabs-tab-active">
									<div class="custom-tabs-tab-btn" tabindex="0">中文</div>
							</div>
							<div data-node-key="2" class="custom-tabs-tab">
									<div class="custom-tabs-tab-btn" tabindex="0">英文</div>
							</div>
					</div>
			</div>
			<figure id="figure-wiki-keyboard-sections-zh">
				<img src="images/keyboard-sections-101-us-zh.svg" 
					width="100%" height="400"
					alt="标准键盘的九种功能按键" />
				<figcaption>标准键盘的五个通用区域</figcaption>
			</figure>
			<figure id="figure-wiki-keyboard-sections" class="figure-hidden">
				<img src="images/keyboard-sections-101-us.svg" 
					width="100%" height="400"
					alt="标准键盘的九种功能按键" />
				<figcaption>标准键盘的九种功能按键</figcaption>
			</figure>
			</div>

		<h4 id="wiki-fun-keys">功能键</h4>

		<dfn id="fun-keys">功能键</dfn>(Function keys) —— KEYCAP{F1} ~ KEYCAP{F12}
		 。<q>功能键是计算机或终端键盘上的一种键，可以对其进行编程，
		以使操作系统命令解释器或应用程序执行某些操作，这是软键的一种形式。
		在一些键盘/计算机上，功能键可能具有默认操作，可在开机时访问。</q>
		在微软操作系统中，
		每个应用程序可以自定义决定每个功能键对应用程序本身意味着什么，
		并且在功能键被按下时执行应用程序想要的操作，例如在一般的浏览器中，
		KEYCAP{F5} 表示刷新浏览器的当前页面。 

		<h4 id="wiki-alnum-keys">字母数字键或字符键</h4>

		<dfn id="alnum-keys">字母数字键或字符键</dfn>(Alphanumeric 或 Character 
		keys) —— KEYCAP{~`} ， KEYCAP{1!} ， KEYCAP{2@} ~ KEYCAP{9&#40;} ， 
		KEYCAP{0&#41;} ， KEYCAP{-_} ， KEYCAP{=+} ， KEYCAP{aA} ~ KEYCAP{zZ} ， 
		KEYCAP{&#91;&#123;} ， KEYCAP{&#93;&#125;} ， KEYCAP{\|} ， KEYCAP{;:} ， 
		KEYCAP{'"} ， KEYCAP{,&lt;} ，KEYCAP{.&gt;} ， KEYCAP{/?} ， 
		KEYCAP{&nbsp;} (空格键)。这些按键都用于键入字母和其它字符(typing)。
		
		<h4 id="wiki-enter-edit-keys">回车键和编辑键</h4>

		<dfn id="enter-edit-keys">回车键和编辑键</dfn>(Enter and editing keys) —— 
		KEYCAP{Enter/↵} ， CODE{NumpadEnter} ， KEYCAP{Backspace} ， 
		KEYCAP{Delete} ，KEYCAP{Insert} 。在文本模式下，

		*	"回车(Enter)"键可以终止一段文本，并将编辑光标移动到下一行的开头; 

		*	"回退(Backspace)" 键可以将编辑光标向后移动一个位置，并删除该位置的字符; 

		*	"删除(Delete)"键可以删除编辑光标前面或下面的字符，或删除当前选择的对象;

		*	"插入(Insert)"键可以切换输入模式。在插入模式(insert mode ，默认)下，
			光标在当前位置插入一个字符，原来的字相应后移。在覆盖模式(overtype mode)
			下，光标位置新输入字会替代原来的字。这一按键常在计算机终端中使用，
			微软的 word 编辑器也有效果，其它可输入框可能无效。下面是在 word 
			编辑器中使用插入键的一个例子，

			<figure id="figure-insert-key">
				<img src="images/insert-key.gif" 
				width="409" height="144" 
				alt="插入键" />
				<div class="custom-figcaption">word 编辑器里的插入键示例，
				在移动光标并打下"45678"后按下了插入键，切换成了覆盖模式</div>
			</figure>
		
		<h4 id="wiki-system-and-gui-keys">系统和 GUI 键</h4>

		<dfn id="system-and-gui-keys">系统和 GUI 键</dfn>(System and GUI keys) —— 
		左右两个 KEYCAP{Meta} 属于系统命令键(system command keys)，GUI 按键包括 
		KEYCAP{Esc} ， KEYCAP{PrtScr SysRq} ， KEYCAP{Pause Break} :

		*	系统命令按键也就是 KEYCAP{Meta} 键，它实际上也是一种修饰符按键，
			在不同的操作系统上有不同的键帽。 <q>Meta</q> 这个单词有变化之意，
			在微软的 Windows 操作系统也常用于配合其它按键调用许多常见系统功能;

			<div class="note custom-note">
			Meta 键是以前 MIT 计算机键盘上的的一个特殊键，例如 Symbolics Space-cadet 
			keyboard 就是 MIT Lisp 计算机上的由 Tom knight 设计的键盘，
			后来 Sun 的键盘上也包含有此键，只不过标示为 Sun 的菱形徽标。现代，
			这个按键发展到和操作系统相关联，在 Linux 和 BSD 操作系统上，它是 
			KEYCAP{Super} 键，在 Windows 操作系统上，它是 KEYCAP{⊞Win} 键，在 
			MacOS 操作系统上 它是 KEYCAP{⌘Cmd} ，虽然键帽不同，但是这个按键的 
			<code>code</code> 值都是 CODE{MetaLeft} 或 CODE{MetaRight} 。<br/>
			查阅更多的按键信息，可以在维基百科上搜索 Meta Key ， Super Key ，
			Command Key 或 Windows Key 。
			</div>
			
		* KEYCAP{Esc} 键的 <code>code</code> 值是 CODE{Escape} ， 
			位于标准键盘布局的左上角。<q>escape</q> 本身有逃离，摆脱的意思，
			现代常称其为退出键，中断键，
			在应用程序中也常使用这个按键执行程序的退出和中断功能;

			<div class="note custom-note">
			在 <strong>以前</strong> 的计算机键盘上，KEYCAP{Esc} 
			键是一个用于生成转义字符( 
			<a href="https://en.wikipedia.org/wiki/Escape_character">
			Escape character</a> )的键。但是现在的计算机用户不再需要关心转义序列，
			CODE{Escape} 键被应用程序程序员挪用，通常是指 <em>停止</em> ，用于 
			<em>"否"、"退出"、"取消"</em> 或 <em>"中止"</em> 对话框中的快捷键，
			也是许多 Web 浏览器中 <em>停止</em> 按钮的常用快捷键，
			并用于取消拖放操作。<br/>
			除此之外，不同操作系统对 CODE{Escape} 键也有许多不同的快捷键使用方式。
			在 Windows 操作系统上，按住 KEYCAP{Ctrl} 和 KEYCAP{Esc} 
			可以调出开始菜单，相当于按下了 KEYCAP{⊞Win} 键。在 MacOS 中， 
			KEYCAP{Esc} 通常会关闭或取消对话框或工作表， KEYCAP{⌘Command} + 
			KEYCAP{⌥ Option} + KEYCAP{Esc} 组合会打开强制退出对话框，
			允许用户结束无响应的应用程序。</br>
			在维基百科的 <a href="https://en.wikipedia.org/wiki/Esc_key">Esc key</a>
			上查阅更多 CODE{Escape} 键信息。
			</div>
		
		*	KEYCAP{PrtScr SysRq} 按键的 <code>code</code> 值是 CODE{PrintScreen} ，
			它的键帽也可以是 KEYCAP{Print Screen} ，除此之外还有 
			<em>Print Scrn ，Prnt Scrn ， Prnt Scr ， Prt Scrn ， Prt Scn ， 
			Prt Scr ， Prt Sc ， Pr Sc 或 PS</em> 缩写，它在(标准键盘布局) [=功能键=] 
			KEYCAP{F12} 的右边，锁定按键 KEYCAP{Scroll Lock} 的左边，表示打印屏幕，
			通俗而言就是截图的意思。
			
			<div class="note custom-note">
			在 <strong>以前</strong> 基于命令行的操作系统(如 MS-DOS )下，
			此键会将当前文本模式屏幕内存缓冲区的内容复制到标准打印机端口。
			现在使用图形界面的新一代操作系统倾向于将当前屏幕的位图图像或屏幕截图
			(screenshot)保存到剪贴板(clipboard)或类似的存储区域。例如在 
			Windows 操作系统中按下 KEYCAP{PrtScr SysRq} 按键，然后通过 
			KEYCAP{⊞Win} + KEYCAP{V} 调出剪贴板 GUI 程序，会发现包含刚才屏幕截图，
			如下图。除此之外，按下 KEYCAP{⊞Win} + KEYCAP{PrtScr SysRq} 组合按键，
			会将屏幕截图保存在默认的图片文件夹中。
			</div>

			<figure id="figure-print-screen">
				<img src="images/print-screen.svg" 
				width="409" height="800" alt="按下 Print Screen 按键后的屏幕截图" />
				<div class="custom-figcaption">
				KEYCAP{⊞ Win} + KEYCAP{V} 调出剪贴板 GUI 程序，里面包含按下 
				Print Screen 按键后的屏幕截图</div>
			</figure>
		
		*	KEYCAP{Pause Break} 按键的 <code>code</code> 值是 CODE{Pause} ，
			称为中断键，暂停键，它也可以使用符号 ⎉ 表示。

			<div class="note custom-note">
			KEYCAP{Pause Break} 键最大的用处在于能快速调出电脑的系统属性，
			按下组合键 KEYCAP{⊞ Win} + EYCAP{Pause Break} ，即可看到。
			除此之外，在开机和处于 DOS 模式的时候，按下 KEYCAP{Pause Break} 
			来暂停进程，之后按下任意键便可继续。有些 IDE (基础开发环境)
			在调试程序时可能也会使用 KEYCAP{Pause Break} 作为暂停程序的快捷键，
			并且提供 KEYCAP{Ctrl} + KEYCAP{Pause Break} 组合键结束调试。
			</div>
		
		<h4 id="wiki-num-keypad-keys">小键盘数字按键</h4>

		<dfn id="num-keypad-keys">小键盘数字按键</dfn>(Numeric keypad) —— 
		KEYCAP{0 Ins} ，KEYCAP{1 End} ，KEYCAP{2 ↓} ， KEYCAP{3 PgDn} ， 
		KEYCAP{4 ←} ， KEYCAP{5} ， KEYCAP{6 →} ，KEYCAP{7 Home} ， KEYCAP{8 ↑} ，
		KEYCAP{9 PgUp} ， KEYCAP{/} ， KEYCAP{*} ， KEYCAP{-} ，KEYCAP{-} ， 
		KEYCAP{. Del} 。这些数字按键便于输入数学数字和运算符号，它们的 
		<code>code</code> 值和 [=字母数字键或字符键=] 的数字键不同，
		前者以"Numpad"为前缀，后者以"Digit"为前缀，例如 CODE{Numpad0} 和 
		CODE{Digit0} 。除此之外，小键盘数字按键组合 KEYCAP{Shift} 
		按键可以实现其它区域按键的功能，例如 KEYCAP{Shift} + KEYCAP{1 End} 
		就相当于导航按键 KEYCAP{End}。小键盘上的数字键功能会被 [=锁定按键=] 影响。
		
		<h4 id="wiki-lock-keys">锁定按键</h4>

		<dfn id="lock-keys">锁定按键</dfn>(Lock keys) —— KEYCAP{CapsLock} ， 
		KEYCAP{ScrollLock} ， KEYCAP{Num Lock} 。 <strong>LOCK</strong> 
		是一种功能，根据所选的锁定设置，将键盘的部分键锁定到不同的操作模式。
		标准键盘上右上方会有三个指示灯指示三个锁定按键的锁定模式是否被启用，
		一般是两种状态，灯亮表示锁定键控制的按键的锁定模式启用，
		灯暗表示锁定按键控制的按键的锁定模式没有启用。默认情况下，只有 Number Lock 
		指示灯亮，表示它控制的小键盘数字按键(Numeric keypad)处于锁定模式下。

		* 数字锁定(Num Lock)或数字锁定(Numeric Lock ， KEYCAP{⇭}) 
			是大多数计算机键盘的小键盘(Numeric keypad)上的一个键
			(在位置区域划分上，这个锁定键肯定是属于小键盘的)。
			它的状态会影响位于主键盘右侧的 [=小键盘数字按键=] 的功能，
			并且状态值由内置在键盘中的 LED 显示，按下 KEYCAP{Num Lock} 
			就能切换锁定状态。需要知晓的是 KEYCAP{/} ， 
			KEYCAP{*} ， KEYCAP{-} ，KEYCAP{-} 的功能不受数字锁定键的状态影响，
			受影响的主要是小键盘上的 KEYCAP{0 End} ~ KEYCAP{9 PgUp} 以及 
			KEYCAP{. Del} ，后面说的数字按键指代的就是这11个按键。

			在锁定情况下(灯亮)，数字按键就如同 [=小键盘数字按键=] 描述的那样，
			可以输入数学数字(以及小数点)，并且能组合 KEYCAP{Shift} 
			按键实现其它区域按键的功能; 在未锁定的情况下(灯暗)，
			数字按键就无法输入数学数字(以及小数点)，但是单独按下会执行在锁定状态下的 
			KEYCAP{Shift} + KEYCAP{Numpad} 功能，也就是说，
			数字锁定键的未锁定状态相当于让数字按键的功能，
			默认是键帽下方的标签对应按键的功能。<br/>

			++----------------+---------------+---------------------------------------------+ custom-numpad-key-list_event-sequence-table
			=| 数字按键(键帽) | 锁定(灯亮)    | 未锁定(灯暗)后的等同的功能按键              |
			 +----------------+---------------+---------------------------------------------+
			+| KEYCAP{0 Ins}  | 0             | KEYCAP{Ins} 插入键，参阅 [=回车键和编辑键=] |
			+| KEYCAP{1 End}  | 1             | KEYCAP{End} 结束键，参阅 [=回车键和编辑键=] |
			+| KEYCAP{2 ↓}    | 2             | KEYCAP{↓} 下箭头键，参阅 [=导航按键=]       |
			+| KEYCAP{3 PgDn} | 3             | KEYCAP{PgDn}  向下翻页键，参阅 [=导航按键=] |
			+| KEYCAP{4 ←}    | 4             | KEYCAP{←}  左箭头键，参阅 [=导航按键=]      |
			+| KEYCAP{5}      | 5             | 通常什么都不做                              |
			+| KEYCAP{6 →}    | 6             | KEYCAP{→} 右箭头键，参阅 [=导航按键=]       |
			+| KEYCAP{7 Home} | 7             | KEYCAP{Home} 起始键，参阅 [=导航按键=]      |
			+| KEYCAP{8 ↑}    | 8             | KEYCAP{↑} 上箭头键，参阅 [=导航按键=]       |
			+| KEYCAP{9 PgUp} | 9             | KEYCAP{PgUp} 向上翻页键，参阅 [=导航按键=]  |
			+| KEYCAP{. Del}  | . 或 ,        | KEYCAP{Del} 删除键，参阅 [=回车键和编辑键=] |
			+++---------------+---------------+---------------------------------------------+
		
		* 滚动锁定(Scroll Lock ，KEYCAP{⤓} 或 KEYCAP{⇳} ) 是大多数 IBM 
			兼容计算机键盘上的锁定键(通常带有相关的状态指示灯)。根据操作系统的不同，
			改键具有不同的使用目的。这个按键不常使用，所以有些键盘精简了这个按键。

			在 Windows 操作系统下，KEYCAP{ScrLk} 是一种切换锁定按键，
			旨在修改箭头按键的行为。当滚动锁定模式打开时(灯亮)，
			箭头键将滚动文本窗口内容，而不是移动光标; 当滚动锁定模式关闭时(默认，
			灯灭)，箭头键将移动光标; 并且这种锁定模式切换只在有限的应用程序中有效果，
			如微软的 Excel ，下图是展示滚动锁定按键功能的动图:

			<figure id="figure-scroll-lock">
				<img src="images/scrolllock.gif" 
				width="800" height="400" alt="滚动锁定按键功能" />
				<div class="custom-figcaption">
				默认关闭滚动锁定，按箭头按键会移动聚焦单元格(相当于移动光标)，之后按下了
				KEYCAP{ScrLk} 按键，按箭头按键会滚动文本窗口内容</div>
			</figure>
			
			浏览器都不支持通过 KEYCAP{ScrLk} 切换滚动锁定模式，
			但是支持光标模式(Caret browsing)的浏览器(谷歌，火狐， IE 等)都支持使用 
			[=功能键=] 的 KEYCAP{F7} 来切换用户的浏览模式。默认情况下，
			浏览器禁用了光标导航，箭头键将滚动文本窗口内容，这和滚动锁定模式打开时类似
			。在启用了关闭模式后(按下 KEYCAP{F7})，浏览器会在文档内容区域移动光标，
			和滚动锁定模式关闭时类似。

			大多数 GUI 环境都忽略了 KEYCAP{ScrLk} 按键的功能，
			而有些则是使用其他组合按键实现了内容滚动和光标移动之间的切换。例如
			一些文本编辑器(如Notepad++、Microsoft Visual Studio)，
			默认情况下按箭头按键会移动文本编辑区域的光标(相当于滚动锁定模式开启)，
			但是当按下 KEYCAP{Ctrl} 键，组合箭头按键一起使用时，
			就能滚动文本编辑器窗口内容了。

		* 大写锁定键(Caps Lock ，KEYCAP{Caps Lock} ， KEYCAP{⇪} 或 
			KEYCAP{CapsLk})，位于 C 行左边第一个，它能控制字母的输入模式，
			按下它就会在打字的时候转换到大写模式，打出来的英文字母都默认为大写。
			这种状态会一直保持下去直至你再按一次大写锁定键，标准 "101" 
			键盘上右上角包含对应的大写锁定的 LED 灯以显示大写锁定键的启用状态。
			在一些电脑上， KEYCAP{Shift} + KEYCAP{Alpha} 组合键 
			<span class="zh-upper">可以</span>  键入当前输入字母对应的 
			<strong>相反</strong> 的大写或小写字母，也就是说，在大写锁定键启用(灯亮)时
			，使用改组合键会键入小写字母。

		<h4 id="wiki-nav-keys">导航按键</h4>
		
		<dfn id="nav-keys">导航按键</dfn>(Navigation keys) —— KEYCAP{↑} ，
		KEYCAP{↓} ，KEYCAP{←} ，KEYCAP{→} ，KEYCAP{Home} / KEYCAP{↖} ， KEYCAP{End}
		 / KEYCAP{↘} ， KEYCAP{PgDn} / KEYCAP{⇟} ， KEYCAP{PgUp} / KEYCAP{⇞} 。
		导航按键主要用于在屏幕上移动文本光标，特别是在文本编辑器中，
		箭头按键能很好的将光标进行上下左右的移动。除此之外，导航按键结合不同的
		[=修饰符按键=] 也能实现很多快捷操作，例如在 [=锁定按键=] 中提到的 
		KEYCAP{Ctrl} + KEYCAP{Arrow} 组合键能模拟滚动锁定模式开启的状态，
		实现滚动窗口内容的效果。

		*	起始键(Home Keys)，其标准符号为 KEYCAP{⇱} ，在现代 Microsoft Windows 
			文本编辑应用程序中，起始键主要用于将光标返回到移动所在行的开头。
			当文本不可编辑时，起始键键用于返回到文档的开头; 如果 KEYCAP{Ctrl} + 
			KEYCAP{Home} 一起按下，也可以在可编辑文本中将光标返回到文档开头; 如果
			KEYCAP{⇧ Shfit} + KEYCAP{Home} 一起按下，
			可以选择光标所在行中光标之前的所有字符。

			<div class="note custom-note">
			在 MacOS 和 Linux 操作系统中起始键会有类似的作用，以及在非 GUI 
			操作系统中会有不同的效果，在维基百科 
			<a href="https://en.wikipedia.org/wiki/Home_key">Home key</a>   
			中查阅更多信息。
			</div>
		
		*	终点键(End Keys)，其标准符号为 KEYCAP{⇲} ，该键的效果与 KEYCAP{Home} 
			按键相反，在现代 Microsoft Windows 文本编辑应用程序中，KYECAP{End} 
			键主要用于将光标移动到光标所在行的末尾。当文本不可编辑时，KYECAP{End} 
			键用于将光标滚动到文档的末尾; 如果 KEYCAP{Ctrl} + KEYCAP{End} 一起按下，
			也可以在可编辑文本中将光标移动到文档末尾; 如果 KEYCAP{⇧ Shfit} + 
			KEYCAP{Home} 一起按下，可以选择光标所在行中光标之后的所有字符。

			<div class="note custom-note">
			在 MacOS 和 Linux 操作系统中 KEYCAP{End} 键会有类似的作用，以及在非 GUI 
			操作系统中会有不同的效果，在维基百科 
			<a href="https://en.wikipedia.org/wiki/End_key">End key</a>   
			中查阅更多信息。
			</div>
		
		* 箭头键(Arrow keys)，又称为光标移动键(cursor movement keys)，
			设计它的目的是沿着指定方向移动光标。术语"光标移动键"与"箭头键"的区别在于，
			前者可以指计算机键盘上指定用于光标移动的各种键中的任何一个，
			而"箭头键"通常指四个特定键中的一个，通常用箭头标记。除了移动光标的功能外，
			箭头键还有滚动网页内容，在文件资源管理器中更改当前选定文件/文件夹，
			在图形软件中移动选定对象的位置，在 Windows 操作系统中与 KEYCAP{⊞} 
			(详见 [=系统和 GUI 键=] 中的 KEYCAP{Meta} )
			按键组合能将当前应用程序按照箭头方向进行分区。

			<div class="note custom-note">
			不同的应用程序中，箭头键会有不同的作用，
			并且会有完全不同的备用按键 <span class="zh-upper">可以</span> 
			有箭头按键的相同功能(如 [=锁定按键=] 中的 KEYCAP{Num Lock} 未锁定后， 
			[=小键盘数字按键=] 里的 KEYCAP{2} ， KEYCAP{4} ， KEYCAP{6} ， KEYCAP{8} 
			能作为光标移动键)。在维基百科 
			<a href="https://en.wikipedia.org/wiki/Arrow_keys">Arrow keys</a>   
			中查阅更多信息。
			</div>
		
		* 向上翻页和向下翻页键(Page Up and Page Down keys)，
			这两个键主要用于在文档中向上或向下滚动，但不同应用程序之间的滚动距离不同。
			例如，在文本编辑器中，它们可以通过模拟实际的翻页进行跳转，
			也可以通过屏幕视图进行跳转，在文档短于显示区域时， KEYCAP{PgUp} 和 
			KEYCAP{PgDn} 通常看不到效果。

			<div class="note custom-note">
			在维基百科 
			<a href="https://en.wikipedia.org/wiki/Page_Up_and_Page_Down_keys">
			Page Up and Page Down keys</a>   
			中查阅更多信息。
			</div>
		
		<h4 id="wiki-modifier-keys">修饰符按键</h4>

		<dfn id="modifier-keys">修饰符按键</dfn>(Modifier keys) —— CODE{ShiftLeft} ，
		CODE{ShiftRight} ， CODE{ControlLeft} ， CODE{ControlRight} ， CODE{AltLeft}
		， CODE{AltRight} 。还有 [=系统和 GUI 键=] 中的 KEYCAP{Meta} 也是修饰符键，
		只不过它与操作系统有关，是比较特殊的修饰符键。在计算中，
		修饰符按键是计算机键盘上的一种特殊键(或组合键)，当按下时，
		它会临时修改另一个键的正常功能。修饰符键本身通常不起任何作用; 也就是说，
		单独按下 KEYCAP{⇧ Shift} 、 KEYCAP{Alt} 或 KEYCAP{Ctrl} 键 (通常) 
		不会触发计算机的任何操作。查阅维基百科 
		<a href="https://en.wikipedia.org/wiki/Modifier_key">
		Modifier key</a> 获取更多信息。

		*	KEYCAP{Shift} 键，也可以使用 KEYCAP{⇧} 符号表示，
			用于键入大写字母和其他备用的"大写(upper)"字符，中文称为"换档键"或"上档键"。
			这里的备用"大写"字符将大写含义扩大到了其它字符，
			大多数符号键和数字键都有两个符号，键帽上会具体显示，
			其中在下面的键帽标签可以直接键入，在上面的键帽标签要先按住 KEYCAP{Shift} 
			键不放后才能按下键入。通常有两个换档键，分别位于 B 行的左侧和右侧。
			除了键入同一按键表示的不同字符外，这个修饰符也有其它功能，详情见维基百科 
			<a href="https://zh.wikipedia.org/wiki/换档键">换档键</a> 。
		
		*	KEYCAP{Ctrl} 键，全称 KEYCAP{Control}，中文名称为"控制键"，
			它作为修饰符键与其它按键组合会执行特殊操作，与 KEYCAP{Shift} 类似，
			单独按下 KEYCAP{Ctrl} 很少执行功能。控制键最常见的两个组合按键就是复制( 
			KEYCAP{Ctrl} + KEYCAP{C} )和粘贴( KEYCAP{Ctrl} + KEYCAP{V} )。
			不同的应用程序也会利用 KEYCAP{Ctrl} 修饰符键组合自己的功能，
			更多的快捷组合按键查阅维基百科 
			<a href="https://en.wikipedia.org/wiki/Control_key">Control key</a> 。
		
		*	KEYCAP{Alt} 键，全称 KEYCAP{Alternate}，中文名称为"转换键"，
			它通常与其他键组合发挥作用。它与其他按键组合工作时，通常用于切换窗口、
			关闭当前应用程序、选择菜单、命令和选项等功能。例如 KEYCAP{Alt} + 
			KEYCAP{Tab ↹} 组合键能在大多数窗口系统上，在当前打开的窗口之间切换，
			这些窗口被认为是 alt选项卡(alt-tabbing)。

			需要注意的是，有些计算机键盘的 CODE{AltRight} 的键帽标签为 KEYCAP{AltGr} 
			(AltGraph)，这个时候这个按键就具有了不同的功能，用于键入不常见的字符，
			如货币符号、预组字元等，并且与 KEYCAP{Shift} 按键功能类似，例如: 
			KEYCAP{AltGr} + KEYCAP{C} 会键入字符 GLYPH{©} 。

		<div class="note custom-note">
		除了上述的通用按键外，还有一个死键(dead key)属于修饰符按键，
		<q>它是电脑键盘或打字机上一种特殊的快捷键。
		它们通常用来对原始的拉丁字母加上附加符号。死键并不会输出一个完整的字母，
		而是改变下一个按下的键的输出结果。
		因此不需要为每一个字母与每一个标音的组合都对应一个单独的键; 
		只要为每一个标音对应一个死键便足够。举例来说，若键盘上有一个重音符( KEYCAP{`}
		)的死键，要输出法文字母 à 只需要先按下 KEYCAP{`} ，再按下 KEYCAP{A} 。如果是 
		è 则是先按下 KEYCAP{`} 再按下E.而通常来说，通过键入 KEYCAP{`} 与 CODE{Space} 
		可以产生一个单独的标音符号。</q> —— 维基百科 
		<a href="https://zh.wikipedia.org/wiki/死键">死键</a> 。<br/>
		基本上，美式标准键盘没有任何死键，
		所以沿用这种键盘的中国大陆地区使用的键盘也没有死键，
		但是世界上大多数地区销售的键盘都有一个 KEYCAP{AltGr} (Alternative graphic)键，
		它可以直接修改一些字母，并将其他字母变成死键(取决于键盘设置)。
		<q>旧的计算机系统，如 MSX ，通常有一个标记为死键的特殊键，它与 KEYCAP{Ctrl} 
		键和 KEYCAP{Shift} 键相结合，可以用来将西欧语言中常见的一些变音符号(
		<code>´</code> 、 <code>`</code> 、 <code>ˆ</code> 和 <code>¨</code> 
		)添加到随后键入的元音中。</q> —— 维基百科 
		<a href="https://en.wikipedia.org/wiki/Dead_key">Dead key</a>
		</div>
	
		
		<h4 id="wiki-application-keys">应用程序键</h4>

		<dfn id="application-keys">应用程序键</dfn>(Menu key 或 Application key) 
		—— CODE{ContextMenu} ，或称"菜单键"，是微软 Windows 
		操作系统计算机键盘上的一个按键。这个按键一般位于键盘右侧，在 
		CODE{ControlRight} 和 KEYCAP{Meta} 键(或位于 CODE{ControlRight} 和 
		CODE{AltRight})之间，主要功能为通过键盘，而不是鼠标右键，弹出相关菜单。
		菜单键和 KEYCAP{⊞} (Windows)键是同时发明的，
		它的标志是一个鼠标光标悬停在其上方的菜单，用符号 KEYCAP{≣} 表示。

		<h4 id="wiki-other-tips">其它补充</h4>

		每个按键都有其自身的发展历史，每个按键也可能因为操作系统，区域，
		硬件等环境不同而具有不同的功能，因此键盘的分区会有不同的方式，
		本章节的分区方式仅提供一种参考。
		按照原文档的通过位置进行分区的方法可能更好理解，
		但是理解每个按键的功能也很重要，故而提出了按照大致的功能进行划分的方式，
		但是按键之间可能会有交叉或特殊的功能，所以不要把这种划分看"死"，例如 
		[=系统和 GUI 键=] 中的 KEYCAP{Meta} 按键实际上也可以是 [=修饰符按键=] 。




<h2 id="code-value-tables">键盘事件 {{KeyboardEvent/code}} 值表格</h2>

	本节定义了一个适用于作 {{KeyboardEvent/code}} 值的值列表。

	<dfn id="key-code-attribute-values">按键码属性值</dfn>(key code attribute value)
	可以是本规范的本节中，所有表的 "<code>KeyboardEvent.code</code>" 
	列中给定的任何值。

	本节中的每个表都有一个"必需(Required)"列，
	用于指示符合规范的实现是否必须实现改值。"必需(Required)"列为"否(No)"
	的单元格表示(改值)是可选的，实现可以用这个值支持特殊键盘(如多媒体或遗留键盘)。
	
	<p class="note">
	注意: 本规范中列出的某些 "必需(Required)" 值可能不适用于所有平台或设备。例如，
	Mac 键盘没有 KEYCAP{Insert} 键，而标准 PC 键盘没有 KEYCAP{Help} 键。
	</p>

	对于本规范中列为 "必需(Required)" 的每个按键，只要该按键在该平台上可用，
	符合规范的实现的 {{KeyboardEvent}} 接口就 <span class="zh-upper">必须</span> 
	返回正确的值。
	
	<p class="note">
	注意: 虽然已经尽一切努力使按键值列表尽可能完整，但随着新输入设备的引入，
	需要定期定义新值。与其允许用户代理定义自己的 [=按键码属性值=] 
	(这些属性值很难在多个用户代理机构之间统一)， 
	<span class="zh-upper">应当</span> 提供一种归档方法来更新这个规范，
	以便可以检测到这些漏洞(bugs)。
	</p>

	<h3 id="key-alphanumeric-section">字母数字区域</h3>

		<dfn id="alphanumeric-section">字母数字区域</dfn>(alphanumeric section)是键盘的主要部分。
		它包含的键分为两大类: [=书写系统键=] (writing system keys) 和 [=功能键②=] 
		(functional keys)，前者的含义根据当前键盘布局而变化，
		后者(大部分)对所有布局都是相同的。

		<h4 id="key-alphanumeric-writing-system">书写系统键</h4>

			<dfn id="writing-system-keys">书写系统键</dfn> 
			是那些根据当前语言环境和键盘布局改变含义(即，它们产生不同的
			{{KeyboardEvent/key}} )的键。

			<figure id="figure-keyboard-codes-alphanum1">
				<img src="images/keyboard-codes-alphanum1.svg" width="653" height="225" alt="The 书写系统键" />
				<figcaption>在 [=字母数字区域=] 的 [=书写系统键=] </figcaption>
			</figure>

			此图显示了一个虚构的键盘，它将可以在各种键盘上找到的所有 [=书写系统键=] 
			(以蓝色和绿色显示)合并在起义。所有标准键盘上都有蓝色的键，
			而绿色键仅在某些键盘上存在。

			<div class="example">
				CODE{Digit2} 和 CODE{KeyQ} 键为 [=书写系统键=] ，当前语言环境为美国时，
				按下会生成 KEY_NOLINK{2} 和 KEY_NOLINK{q} ，而当语言环境为法国时，
				则生成 KEY_NOLINK{é} 和 KEY_NOLINK{a} 。
			</div>

			每个按键上显示的名称是分配给该按键的 {{KeyboardEvent/code}} 。
			在可能的情况下， {{KeyboardEvent/code}} 名称基于该位置的美国键的名称(即，
			它们基于美式 "101" 标准键盘布局)，这遵循 [[USB-HID]] 中的命名约定。
			对于美式键盘上不存在的键，则使用英式或日式键盘布局的名称。

			请注意，此图中有两个 CODE{Backslash} 键: 大的那一个键位于标准 "101" 
			键盘布局的 D 行末尾，另一个小的位于 "102" 、 "104" 和 "106" 键盘布局的 
			C 行的 CODE{Quote}  和 CODE{Enter} 之间。键盘布局上只能有一个 
			CODE{Backslash} 键。

			BEGIN_CODE_TABLE alphanumeric-writing-system "在字母数字区域的书写系统键的 code 值表。"
				CODE Backquote		在美式键盘上键帽标签是 KEYCAP{`~} (反引号 波浪号)。
									在日式键盘上是 KEYCAP{半角/全角/漢字} 
									(hankaku/zenkaku/汉字)键。
				CODE Backslash		在标准美式 101 键盘布局上的键帽标签是 KEYCAP{\|} 
									(反斜杠 竖线)，如果 102 、 104 、 106 键盘布局上的该键位于 C 
									行的 KEYCAP{"} 和 KEYCAP{Enter} 之间则拥有同样的键帽标签。
									在标准英式 102 键盘布局上的键帽标签是 KEYCAP{#~} 
									(井号 波浪号)。
				CODE BracketLeft	在标准美式 101 键盘布局上的键帽标签是 KEYCAP{[{} 
									(左方括号 左花括号)。
				CODE BracketRight	在标准美式 101 键盘布局上的键帽标签是 KEYCAP{]&rcub;}
									(右方括号 右花括号)。
				CODE Comma				在标准美式 101 键盘布局上的键帽标签是 KEYCAP{,&lt;}
									(逗号 左角括号)。

				CODE Digit0			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{0)}
									(零 右括号)。
				CODE Digit1			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{1!}
									(一 叹号)。
				CODE Digit2			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{2@}
									(二 艾特号)。
				CODE Digit3			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{3#}
									(三 井号)。
				CODE Digit4			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{4$}
									(四 金钱符号)。
				CODE Digit5			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{5%}
									(五 百分号)。
				CODE Digit6			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{6^}
									(六 KEYCAP{^} 有多种含义: 插入符号、脱字符号、逻辑异或符号、
									幂等)。
				CODE Digit7			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{7&}
									(七 与号、和号)。
				CODE Digit8			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{8*}
									(八 星号)。
				CODE Digit9			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{9(}
									(九 左括号)。

				CODE Equal			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{=+}
									(等号 加号)。
				CODE IntlBackslash	位于左 KEYCAP{Shift} 键和 KEYCAP{Z} 键之间。
									在标准英式键盘上的键帽标签是 KEYCAP{\|} (反斜杠 竖线)。
				CODE IntlRo			位于KEYCAP{/} ( CODE{Slash} )和右 KEYCAP{Shift} 键之间。
									在标准日式键盘上的键帽标签是 KEYCAP{\ろ} (反斜杠 ろ，发音 
									PHONETIC{ro} )。
				CODE IntlYen		位于 KEYCAP{=} 和 KEYCAP{Backspace} 键之间。
									在标准日式键盘上的键帽标签是 KEYCAP{¥} (日元符号)。
									在标准俄式键盘上的键帽标签是 KEYCAP{\/} (反斜杠 斜杠)。

				CODE KeyA			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{a} 。
									在 AZERTY (例如法语)键盘上的键帽标签是 KEYCAP{q} 。
				CODE KeyB			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{b} 。
				CODE KeyC			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{c} 。
				CODE KeyD			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{d} 。
				CODE KeyE			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{e} 。
				CODE KeyF			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{f} 。
				CODE KeyG			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{g} 。
				CODE KeyH			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{h} 。
				CODE KeyI			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{i} 。
				CODE KeyJ			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{j} 。
				CODE KeyK			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{k} 。
				CODE KeyL			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{l} 。
				CODE KeyM			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{m} 。
				CODE KeyN			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{n} 。
				CODE KeyO			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{o} 。
				CODE KeyP			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{p} 。
				CODE KeyQ			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{q} 。
									在 AZERTY (例如法语)键盘上的键帽标签是 KEYCAP{a} 。
				CODE KeyR			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{r} 。
				CODE KeyS			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{s} 。
				CODE KeyT			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{t} 。
				CODE KeyU			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{u} 。
				CODE KeyV			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{v} 。
				CODE KeyW			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{w} 。
									在 AZERTY (例如法语)键盘上的键帽标签是 KEYCAP{z} 。
				CODE KeyX			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{x} 。
				CODE KeyY			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{y} 。
									在 QWERTZ (例如德语)键盘上的键帽标签是 KEYCAP{z} 。
				CODE KeyZ			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{z} 。
									在 AZERTY (例如法语)键盘上的键帽标签是 KEYCAP{w} 。
									在 QWERTZ (例如德语)键盘上的键帽标签是 KEYCAP{y} 。

				CODE Minus			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{-_}
									(连字暨减号 下划线)。
				CODE Period			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{.&gt;}
									(句号 右角括号)。
				CODE Quote			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{'"}
									(单引号 双引号)。
				CODE Semicolon		在标准美式 101 键盘布局上的键帽标签是 KEYCAP{;:}
									(分号 冒号)。
				CODE Slash			在标准美式 101 键盘布局上的键帽标签是 KEYCAP{/?}
									(斜杠 问号)。
			END_CODE_TABLE

			<div class="note custom-note">
			上表中的 "AZERTY" ，"QWERTZ" 表示的是以某种字母排序方向进行排列的键盘布局。
			<q>尽管有大量的键盘布局用拉丁字母书写的语言，
			但这些布局中的大多数都非常相似。根据A、M、Q、W、Y和Z键在键盘上的位置，
			它们可以分为三个主要类别。这些布局通常以 D 行的前六个字母命名: AZERTY 、
			QWERTY 、 QWERTZ 、 QZERTY 及其其它国家变体。</q> —— 维基百科 
			<a href="https://en.wikipedia.org/wiki/Keyboard_layout">
			Keyboard layout</a> <br/>
			需要注意的是，上表中的按键的 <code>code</code> 值大部分基于美式标准键盘，
			美式标准键盘属于 QWERTY 布局，<code>code</code> 值和键帽是一一对应的。
			但在其它键盘布局下，在浏览器中触发的 KeyboardEvent 事件对象的 
			<code>code</code> 属性值通常与键帽标签对应，但 
			<strong>不一定完全相同</strong> 。上表就指出了在 AZERTY 键盘布局下， 
			CODE{KeyW} 和 CODE{KeyZ} 的按键键帽标签分别对应 KEYCAP{z} 和 KEYCAP{w} ，
			CODE{KeyA} 和 CODE{KeyQ} 的按键键帽标签分别对应 KEYCAP{q} 和 KEYCAP{a} ; 
			在 QWERTZ 键盘布局下， CODE{KeyY} 和 CODE{KeyZ} 的按键键帽标签分别对应 
			KEYCAP{z} 和 KEYCAP{y} 。在实际输入过程中，输入的字符基本上以键帽为准。
			</div>
		

		<h4 id="key-alphanumeric-functional">功能键</h4>

			<dfn id="functional-keys">功能键②</dfn> (functional keys ，
			<em>不要与前面描述的 [=功能键=] 和后面描述的 [=功能键③=] 混淆</em>)，
			这里指 [=字母数字区域=] 中的那些功能按键，
			它们提供所有语言环境通用的编辑功能(如 KEYCAP{Shift} ， KEYCAP{Tab} ， 
			KEYCAP{Enter} 和 KEYCAP{Backspace})。除了少数例外，
			这些键不会根据当前键盘布局更改含义。

			<figure id="figure-keyboard-codes-alphanum2">
				<img src="images/keyboard-codes-alphanum2.svg" width="653" height="225" 
				alt="标准 [=功能键②=] 集合" />
				<figcaption>[=字母数字区域=] 中的标准 [=功能键②=] 集合</figcaption>
			</figure>

			CODE{AltRight} 键(以绿色突出显示)是唯一不会为每个区域设置生成相同的
			{{KeyboardEvent/key}} 值的 [=功能键②=] 。在某些地区，它会生成 KEY{Alt} 
			，而在其他地区，它生成 KEY{AltGraph} 。

			BEGIN_CODE_TABLE alphanumeric-functional-1 "在字母数字区域的功能键的 code 值表。"
				CODE AltLeft			KEYCAP{Alt}，KEYCAP{Option} 或 KEYCAP{&#8997;} 。
				CODE AltRight			KEYCAP{Alt}，KEYCAP{Option} 或 KEYCAP{&#8997;} 。
									在许多键盘布局中，该按键键帽标签为 KEYCAP{AltGr} 。
				CODE Backspace		KEYCAP{Backspace} 或 KEYCAP{&#9003;} 。
									在苹果键盘布局中，该按键键帽标签为 KEYCAP{Delete} 。
				CODE CapsLock			KEYCAP{CapsLock} 或 KEYCAP{&#8682;}
				CODE ContextMenu	应用程序上下文菜单键，通常位于右侧 KEYCAP{Meta} 
									键和右侧 KEYCAP{Control} 之间。(非规范补充: 常用 KEYCAP{≣} 
									表示，见 [=应用程序键=] 。)
				CODE ControlLeft	KEYCAP{Control} 或 KEYCAP{&#8963;}
				CODE ControlRight	KEYCAP{Control} 或 KEYCAP{&#8963;}
				CODE Enter				KEYCAP{Enter} 或 KEYCAP{&crarr;} 。
									在苹果键盘布局中，该按键键帽标签为 KEYCAP{Return} 。
				CODE MetaLeft			Windows 操作系统下键帽标签是 KEYCAP{⊞} ;
									在苹果键盘布局中，该按键键帽标签为 KEYCAP{&#x2318;}，
									KEYCAP{Command} ; 或其它操作系统定义的操作系统符号键。
									(非规范补充: 参阅 [=系统和 GUI 键=] 获取更多信息)
				CODE MetaRight		Windows 操作系统下键帽标签是 KEYCAP{⊞} ;
									在苹果键盘布局中，该按键键帽标签为 KEYCAP{&#x2318;}，
									KEYCAP{Command} ; 或其它操作系统定义的操作系统符号键。
									(非规范补充: 参阅 [=系统和 GUI 键=] 获取更多信息)
				CODE ShiftLeft		KEYCAP{Shift} 或 KEYCAP{&#8679;}
				CODE ShiftRight		KEYCAP{Shift} 或 KEYCAP{&#8679;}
				CODE Space				KEYCAP{&nbsp;} (空格)
				CODE Tab					KEYCAP{Tab} 或 KEYCAP{&#8677;}
			END_CODE_TABLE

			在一些键盘(尤其是日语和韩语)上，空格键的尺寸减小了，以便为底部一行( A 
			行)的额外按键腾出空间。这些键通常允许用户改变当前的输入模式。请注意，
			尽管这些日语和韩语键中的一些键在键盘上占据相同的物理位置，但它们使用不同的 
			{{KeyboardEvent/code}} 值。

			<div class="figure-change"  data-content="images/figure-function-row-a">
			<div class="custom-tabs-nav-wrap">
					<div class="custom-tabs-nav-list">
							<div data-node-key="1" class="custom-tabs-tab custom-tabs-tab-active">
									<div class="custom-tabs-tab-btn" tabindex="0">汉化图</div>
							</div>
							<div data-node-key="2" class="custom-tabs-tab">
									<div class="custom-tabs-tab-btn" tabindex="0">原图</div>
							</div>
					</div>
			</div>
			<figure id="figure-function-row-a-zh">
				<img src="images/functional-row-a-zh.svg" width="700" height="160" 
				alt="在不同的键盘上底部一行的 [=功能键②=] 对比" />
				<figcaption>在不同的键盘上底部一行的 [=功能键②=] 对比</figcaption>
			</figure>
			<figure id="figure-function-row-a" class="figure-hidden">
				<img src="images/functional-row-a.svg" width="700" height="160" 
				alt="在不同的键盘上底部一行的 [=功能键②=] 对比" />
				<figcaption>在不同的键盘上底部一行的 [=功能键②=] 对比</figcaption>
			</figure>
			</div>
			

			BEGIN_CODE_TABLE alphanumeric-functional-2 "在日式和韩式键盘的额外功能键的 code 值表。"
				CODE NonConvert 	日语: KEYCAP{無変換} ( PHONETIC{muhenkan} )
				CODE Convert		日语: KEYCAP{変換} ( PHONETIC{henkan} )
				CODE KanaMode		日语: KEYCAP{カタカナ/ひらがな/ローマ字} ( 
									PHONETIC{katakana/hiragana/romaji} )
				CODE_OPT Lang1		韩语: HangulMode KEYCAP{한/영} ( PHONETIC{han/yeong} )
									<br/>日语 (Mac 键盘): KEYCAP{かな} ( PHONETIC{kana} )
				CODE_OPT Lang2		韩语: Hanja KEYCAP{한자} ( PHONETIC{hanja} )<br/>
									日语(Mac keyboard): KEYCAP{英数} ( PHONETIC{eisu} )
				CODE_OPT Lang3		日语(文字处理器键盘): Katakana
				CODE_OPT Lang4		日语(文字处理器键盘): Hiragana
				CODE_OPT Lang5		日语(文字处理器键盘): Zenkaku/Hankaku
			END_CODE_TABLE

			在苹果键盘上，底部一行的一些键被省略，
			未被省略的键则按(和上图)不同的顺序排列。

			<div class="note custom-note">
			这些按键主要用于切换输入模式，查阅 [[#keyboard-106]] 获取更多信息。其中，
			CODE{Lang3} ~ CODE{Lang5} 属于文字处理器的键盘上的按键，CODE{Lang1} ~ 
			CODE{Lang5} 是可选的，实现可以用这个值支持特殊键盘。更多信息请查阅维基百科 
			<a href="https://en.wikipedia.org/wiki/Word_processor_(electronic_device)">
			word processor</a> 。
			</div>
			
	<h3 id="key-controlpad-section">控制板区域</h3>

		键盘的 <dfn id="control-pad">控制板</dfn> (control pad)区域是一组(通常有 
		6 个键)用于执行导航和编辑操作的按键，例如 KEYCAP{Home} ， KEYCAP{PageUp} 和
		KEYCAP{Insert} 。

		<div class="figure-change"  data-content="images/control-pad">
		<div class="custom-tabs-nav-wrap">
				<div class="custom-tabs-nav-list">
						<div data-node-key="1" class="custom-tabs-tab custom-tabs-tab-active">
								<div class="custom-tabs-tab-btn" tabindex="0">汉化图</div>
						</div>
						<div data-node-key="2" class="custom-tabs-tab">
								<div class="custom-tabs-tab-btn" tabindex="0">原图</div>
						</div>
				</div>
		</div>
		<figure id="figure-control-pad-zh">
			<img src="images/control-pad-zh.svg" width="495" height="135" 
			alt="标准控制板布局" />
			<figcaption>标准 [=控制板=] 布局</figcaption>
		</figure>
		<figure id="figure-control-pad" class="figure-hidden">
			<img src="images/control-pad.svg" width="495" height="135" 
			alt="标准控制板布局" />
			<figcaption>标准 [=控制板=] 布局</figcaption>
		</figure>
		</div>
		

		BEGIN_CODE_TABLE controlpad "在控制板区域的按键的 code 值表。"
			CODE Delete		KEYCAP{&#8998;} 。 前向删除键。请注意，在苹果键盘上，
							键盘的字母数字区域按键标签为 KEYCAP{Delete} 的键应编码为 
							CODE{Backspace} 。
			CODE End		KEYCAP{End} 或 KEYCAP{&#8600;}
			CODE Help		KEYCAP{Help} 。 标准 PC 键盘上不存在。
			CODE Home		KEYCAP{Home} 或 KEYCAP{&#8598;}
			CODE Insert		KEYCAP{Insert} 或 KEYCAP{Ins} 。 Not present on Apple keyboards.
			CODE PageDown	KEYCAP{Page Down}，KEYCAP{PgDn} 或 KEYCAP{&#8671;}
			CODE PageUp		KEYCAP{Page Up}，KEYCAP{PgUp} 或 KEYCAP{&#8670;}
		END_CODE_TABLE

		<p class="note">
		KEYCAP{Fn} (常见于苹果标准键盘)键的 {{KeyboardEvent/code}} 定义在下面的 
		[=功能区域=] 。
		</p>

	<h3 id="key-arrowpad-section">箭头板区域</h3>

		<dfn id="arrow-pad">箭头板</dfn> (arrow pad)区域包含4个箭头键。
		按键通常以"倒置 T"的配置进行排列。


		<figure id="figure-arrow-pad">
			<img src="images/arrow-pad.svg" width="160" height="115" 
			alt="标准箭头板布局" />
			<figcaption>标准 [=箭头板=] 布局</figcaption>
		</figure>

		BEGIN_CODE_TABLE arrowpad "在箭头板区域的按键的 code 值表。"
			CODE ArrowDown	KEYCAP{&darr;}
			CODE ArrowLeft	KEYCAP{&larr;}
			CODE ArrowRight KEYCAP{&rarr;}
			CODE ArrowUp	KEYCAP{&uarr;}
		END_CODE_TABLE

	<h3 id="key-numpad-section">数字板区域</h3>

		在键盘上的 <dfn id="numpad">数字板</dfn> (numpad) 区域是一组按键，
		排列成网格状，就像计算器或手机那样。本节包含数字和数学运算符键。通常，
		数字板区域会包含 KEYCAP{NumLock} 键，该键可使数字板中的按键的功能，
		在标准数字功能和模拟 [=控制板=] 与 [=箭头板=] 中按键的功能之间进行切换。
		笔记本电脑和紧凑型键盘通常会省略这些键以节省空间。

		<div class="note custom-note">
		关于 KEYCAP{NumLock} 的功能可以参阅 [[#wiki-lock-keys]] 中的数字锁定键。
		</div>
		

		<dfn id="keypad">小键盘</dfn> (keypad)是 [=数字板=] 的备用术语。

		<div class="figure-change"  data-content="images/numpad">
		<div class="custom-tabs-nav-wrap">
				<div class="custom-tabs-nav-list">
						<div data-node-key="1" class="custom-tabs-tab custom-tabs-tab-active">
								<div class="custom-tabs-tab-btn" tabindex="0">汉化图</div>
						</div>
						<div data-node-key="2" class="custom-tabs-tab">
								<div class="custom-tabs-tab-btn" tabindex="0">原图</div>
						</div>
				</div>
		</div>
		<figure id="figure-numpad-zh">
			<img src="images/numpad-zh.svg" width="606" height="247" 
			alt="标准数字板布局" />
			<figcaption>标准 [=数字板=] 布局</figcaption>
		</figure>
		<figure id="figure-numpad" class="figure-hidden">
			<img src="images/numpad.svg" width="606" height="247" 
			alt="标准数字板布局" />
			<figcaption>标准 [=数字板=] 布局</figcaption>
		</figure>
		</div>

		本节中的 {{KeyboardEvent/code}} 
		值也应用于手机小键盘和遥控设备中在网格上排列的数字键。

		<figure id="figure-numpad-mobile">
			<img src="images/numpad-mobile.svg" width="135" height="180" 
			alt="标准移动设备小键盘布局" />
			<figcaption>标准移动设备小键盘布局</figcaption>
		</figure>

		标准 [=数字板=] 有时包含括号(parentheses)、运算符(operators)、
		十六进制符号(hexadecimal symbols)或计算器函数键(calculator functions，如 
		KEYCAP{Backspace} )这些附加键以扩展。下表列出了一些常用的附加键。

		BEGIN_CODE_TABLE numpad "在数字板区域的按键的 code 值表。"
			CODE NumLock				在 Mac 中，CODE{NumLock} 码应当用于数字板中的 
										KEYCAP{Clear} 键。
			CODE Numpad0				在标准键盘上的按键键帽标签是 KEYCAP{0 Ins} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{0}
			CODE Numpad1				在标准键盘上的按键键帽标签是 KEYCAP{1 End} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{1} 或 
										KEYCAP{1 QZ}
			CODE Numpad2				在标准键盘上的按键键帽标签是 KEYCAP{2 &darr;} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{2 ABC}
			CODE Numpad3				在标准键盘上的按键键帽标签是 KEYCAP{3 PgDn} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{3 DEF}
			CODE Numpad4				在标准键盘上的按键键帽标签是 KEYCAP{4 &larr;} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{4 GHI}
			CODE Numpad5				在标准键盘上的按键键帽标签是 KEYCAP{5} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{5 JKL}
			CODE Numpad6				在标准键盘上的按键键帽标签是 KEYCAP{6 &rarr;} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{6 MNO}
			CODE Numpad7				在标准键盘上的按键键帽标签是 KEYCAP{7 Home} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{7 PQRS} 或 
										KEYCAP{7 PRS}
			CODE Numpad8				在标准键盘上的按键键帽标签是 KEYCAP{8 &uarr;} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{8 TUV}
			CODE Numpad9				在标准键盘上的按键键帽标签是 KEYCAP{9 PgUp} <br/>
										在移动设备或遥控器上的按键键帽标签是 KEYCAP{9 WXYZ} 或 
										KEYCAP{9 WXY}
			CODE NumpadAdd				KEYCAP{+}
			CODE_OPT NumpadBackspace	出现在微软自然键盘(Microsoft Natural 
										Keyboard)中。
			CODE_OPT NumpadClear		KEYCAP{C} 或 KEYCAP{AC} (All Clear，全部清除)。
										用于在 [=数字板=] 中已有一个 KEYCAP{NumLock} 键的情况下，
										还需要有一个 KEYCAP{Clear} 时，使用 CODE{NumpadClear} 
										进行区分。因为在 Mac 中，CODE{NumLock} 码总是用于 [=数字板=]
										中的 KEYCAP{Clear} 键。
			CODE_OPT NumpadClearEntry	KEYCAP{CE} (Clear Entry，清除输入)
			CODE_OPT NumpadComma		KEYCAP{,} (千位分隔符). 对于千位分隔符是 "."的地区
										(例如，巴西)，这个按键键帽标签是 KEYCAP{.} 。(非规范补充: 
										与键入字符对应，见 <a href="#keyboard-104-note">巴西 "104" 
										键盘的非规范注释</a> )
			CODE NumpadDecimal			KEYCAP{. Del} 。 对于小数点分隔符是 "."的地区
										(例如，巴西)，这个按键键帽标签是 KEYCAP{,} 。(非规范补充: 
										与键入字符对应，见 <a href="#keyboard-104-note">巴西 "104" 
										键盘的非规范注释</a> )
			CODE NumpadDivide			KEYCAP{/}
			CODE NumpadEnter
			CODE_OPT NumpadEqual		KEYCAP{=}
			CODE_OPT NumpadHash			在标准键盘上的按键键帽标签是 KEYCAP{#} 。 
										此按键通常位于 KEYCAP{9} 键的下方和 KEYCAP{0} 键右侧。
										(非规范补充: 见 
										<a href="#figure-numeric-keypad">通用移动键盘的图形描述</a> 
										)
			CODE_OPT NumpadMemoryAdd	KEYCAP{M+} 将当前计算结果(current entry
										)添加到存储在内存的一个值中。
			CODE_OPT NumpadMemoryClear	KEYCAP{MC} 清除存储在内存中的
										(那个保存计算结果的)值。
			CODE_OPT NumpadMemoryRecall	KEYCAP{MR} 将当前计算结果(current entry
										)替换成存储在内存中的那个值(存储好的上一次计算结果)。
			CODE_OPT NumpadMemoryStore	KEYCAP{MS} 
										将存储在内存中的那个值替换成当前计算结果(current entry)。
			CODE_OPT NumpadMemorySubtract	KEYCAP{M-} 让存储在内存中的那个值
										(存储好的上一次计算结果)中减去当前计算结果(current entry)。
			CODE NumpadMultiply			在标准键盘上的按键键帽标签是 KEYCAP{*} 。
										包含数学运算功能( KEYCAP{+} ， KEYCAP{-} ， KEYCAP{*} 和 
										KEYCAP{/})的 [=数字板=] 拥有此按键。 <br/>
										在移动设备或遥控器上，拥有相同键帽标签( KEYCAP{*} 
										)的按键的 <code>code</code> 值是 CODE{NumpadStar} 。
			CODE_OPT NumpadParenLeft	KEYCAP{(} 出现在微软自然键盘(Microsoft Natural 
										Keyboard)中。
			CODE_OPT NumpadParenRight	KEYCAP{)} 出现在微软自然键盘(Microsoft Natural 
										Keyboard)中。
			CODE_OPT NumpadStar			在移动设备或遥控器上的按键键帽标签是 KEYCAP{*} 。
										此按键通常位于 KEYCAP{7} 键的下方和 KEYCAP{0} 键左侧。
										(非规范补充: 见 
										<a href="#figure-numeric-keypad">通用移动键盘的图形描述</a> 
										) <br/>
										在标准键盘的数字键盘上，拥有相同键帽标签( KEYCAP{*} 
										)的按键的 <code>code</code> 值是 CODE{NumpadMultiply} 。
			CODE NumpadSubtract			KEYCAP{-}
		END_CODE_TABLE

		对于 [=数字板=] 提供的，没有列在此处的按键，应通过以"Numpad"
		开头并附加按键的适当描述来创建 {{KeyboardEvent/code}} 值字符串。

	<h3 id="key-function-section">功能区域</h3>
		<dfn id="function-section">功能区域</dfn> (function section)靠着键盘顶部(在 
		[=字母数字区域=] 之上) 并包含有 [=功能键③=] 以及一些附加的特殊键(例如 
		KEYCAP{Esc} 和 KEYCAP{Print Screen} )。

		<dfn id="function-key">功能键③</dfn> 是键帽标签为 KEYCAP{F1} ... KEYCAP{F12} 
		的键，应用程序或操作系统可以利用这些按键关联自定义功能或操作。

		在一些键盘上(尤其是笔记本电脑或其他便携式计算机上的键盘)，功能键③ 
		( KEYCAP{F1} ... KEYCAP{F12} )会被定义为具有其他调节功能
		(primary functions ，例如控制显示亮度或音频音量)，并且在使用这些主要功能
		(primary functions)时需要组合按下 KEYCAP{Fn} 键。不幸的是，
		这些按键的主要功能因制造商而异。因此， {{KeyboardEvent/code}} 值总是设置为
		[=功能键③=] 名称(即键帽标签名称和 <code>code</code> 值对应)。

		BEGIN_CODE_TABLE function "在功能区域的按键的 code 值表。"
			CODE Escape			KEYCAP{Esc} 或 KEYCAP{⎋} 
								(非规范补充: 详见 [=系统和 GUI 键=] 中的退出键)
			CODE F1				KEYCAP{F1}
			CODE F2				KEYCAP{F2}
			CODE F3				KEYCAP{F3}
			CODE F4				KEYCAP{F4}
			CODE F5				KEYCAP{F5}
			CODE F6				KEYCAP{F6}
			CODE F7				KEYCAP{F7}
			CODE F8				KEYCAP{F8}
			CODE F9				KEYCAP{F9}
			CODE F10			KEYCAP{F10}
			CODE F11			KEYCAP{F11}
			CODE F12			KEYCAP{F12}
			CODE_OPT Fn			KEYCAP{Fn} 这通常是一个硬件按键(hardware key)，
								它不会生成单独的码值。大多数键盘不会将此键放置在 [=功能区域=] ，
								但它在此表中展示是为了将其与其关联的按键一起归类。(非规范补充: 
								见本节下面的 <a href="#fn-key-note">非规范注释</a> )
			CODE_OPT FnLock		KEYCAP{FLock} 或 KEYCAP{FnLock} 。功能锁定键
								(Function Lock key)。出现在微软自然键盘(Microsoft Natural 
								Keyboard)中。
			CODE PrintScreen	KEYCAP{PrtScr SysRq} 或 KEYCAP{Print Screen}
								(非规范补充: 详见 [=系统和 GUI 键=] 中的截屏键)
			CODE ScrollLock		KEYCAP{Scroll Lock}
								(非规范补充: 详见 [=锁定按键=] 中的滚动锁定按键)
			CODE Pause			KEYCAP{Pause Break}
								(非规范补充: 详见 [=系统和 GUI 键=] 中的暂停键)
		END_CODE_TABLE

		对于提供12个以上的 [=功能键③=] 的键盘， {{KeyboardEvent/code}} 
		值遵循表中显示的模式，"F"后面跟着 [=功能键③=] 数字 —— CODE_NOLINK{F13} 、
		CODE_NOLINK{F14} 、 CODE_NOLINK{F15}，依此类推。

		<p class="note">
		苹果键盘的 [=功能区域=] 可能有 KEYCAP{Eject} (弹出)键或 KEYCAP{Power} 
		(电源)键. 这些键的 {{KeyboardEvent/code}} 值在 [[#key-media]] 中有定义。
		</p>

		<div class="note custom-note" id="fn-key-note" 
		data-content="非规范注释，关于 Fn 按键的解释: ">
		<br/>
		<q>KEYCAP{Fn} 键是 <em>功能(function)</em> 的缩写，是许多键盘上
		(尤其是笔记本电脑上)的一个修饰键，它经常用在紧凑的布局组合其他独立的键( 
		[=功能键③=] )一起使用。由于键盘尺寸的限制，它通常出现在笔记本电脑上。
		作为 KEYCAP{FLock} 键，它也出现在许多全尺寸的"多媒体"键盘上。
		它主要用于快速更改显示设置或音频设置，如亮度、对比度或音量，
		使用时需要与相应的键( [=功能键③=] )一起按下以更改设置。</q> —— 维基百科
		<a href="https://en.wikipedia.org/wiki/Fn_key">Fn key</a> 。<br/>
		中国大陆地区的沿用的美式键盘上的 KEYCAP{Fn} 按键通常会覆盖替换在一个 
		KEYCAP{⊞} ( KEYCAP{Meta} ) 上，即键盘上只包含一个系统命令按键，
		而另一个位置使用 CODE{Fn} 代替。
		</div>
		

	<h3 id="key-media">多媒体按键</h3>

		<dfn id="media-keys">多媒体按键</dfn> 是添加到键盘上的额外按键键，
		可提供播放、暂停或音量控制等与 <em>媒体</em> 相关的功能。
		这些键在键盘上没有标准位置，因此不同制造商的键盘可能有不同的按键排列
		(arrangement)或一套完全不同的按键集合。

		[=多媒体按键=] 在外观上通常与普通的键入按键不同，
		它可能嵌入(recessed)到键盘中。

		在笔记本电脑键盘上，这些键通常与 [=功能键③=] 结合(merged)，
		也就是说 [=多媒体按键=] 可被理解成这些键的主要功能(primary function)，
		并且 [=功能键③=] 可被理解成需要同时按下Fn键。在此配置下，
		{{KeyboardEvent/code}} 应该设置地与 [=功能键③=] ( CODE{F1} ... CODE{F12} 
		)匹配。当键以这种方式合并时， {{KeyboardEvent/code}} 值取自 [=功能键③=] 值，
		因为 [=多媒体按键=] 值在键盘之间不一致。

		BEGIN_CODE_TABLE media "多媒体按键的 code 值表。"
			CODE_OPT BrowserBack		一些笔记本电脑将此键放在 KEYCAP{&uarr;} 键左边。
			CODE_OPT BrowserFavorites
			CODE_OPT BrowserForward		一些笔记本电脑将此键放在 KEYCAP{&uarr;} 键右边。
			CODE_OPT BrowserHome
			CODE_OPT BrowserRefresh
			CODE_OPT BrowserSearch
			CODE_OPT BrowserStop
			CODE_OPT Eject				KEYCAP{Eject} 或 KEYCAP{&#9167;} 。 
										在一些苹果键盘上，此按键位于 [=功能区域=] 。
			CODE_OPT LaunchApp1			有时候在键盘上的键帽标签为 KEYCAP{My Computer} 
			CODE_OPT LaunchApp2			有时候在键盘上的键帽标签为 KEYCAP{Calculator} 
			CODE_OPT LaunchMail
			CODE_OPT MediaPlayPause
			CODE_OPT MediaSelect
			CODE_OPT MediaStop
			CODE_OPT MediaTrackNext
			CODE_OPT MediaTrackPrevious
			CODE_OPT Power				在一些苹果键盘上，此按键位于 [=功能区域=] 
										并代替 KEYCAP{Eject} 键。
			CODE_OPT Sleep
			CODE_OPT AudioVolumeDown
			CODE_OPT AudioVolumeMute
			CODE_OPT AudioVolumeUp
			CODE_OPT WakeUp
		END_CODE_TABLE

	<h3 id="key-legacy">遗留的、非标准的和特殊的按键</h3>

		这些键在现代标准键盘上找不到。此处列出的内容仅供参考。

		BEGIN_CODE_TABLE legacy-modifier "遗留的修饰符按键的 code 值表。"
			CODE_OPT Hyper
			CODE_OPT Super
			CODE_OPT Turbo
		END_CODE_TABLE

		&nbsp;

		BEGIN_CODE_TABLE legacy-process "遗留的程序控制按键的 code 值表。"
			CODE_OPT Abort
			CODE_OPT Resume
			CODE_OPT Suspend
		END_CODE_TABLE

		&nbsp;

		BEGIN_CODE_TABLE legacy-editing "遗留的编辑按键的 code 值表。"
			CODE_OPT Again	出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Copy	出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Cut	出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Find	出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Open	出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Paste	出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Props	出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Select 出现在 Sun 公司的 USB 键盘上。
			CODE_OPT Undo	出现在 Sun 公司的 USB 键盘上。
		END_CODE_TABLE

		以下按键出现在非标准国际键盘上。

		BEGIN_CODE_TABLE international "出现在非标准国际键盘上的按键的 code 值表。"
			CODE_OPT Hiragana	出现在日语文字处理器键盘上，专用 KEYCAP{ひらがな} 按键
			CODE_OPT Katakana	出现在日语文字处理器键盘上，专用 KEYCAP{カタカナ} 按键。
		END_CODE_TABLE

		<div class="note custom-note">
		KEYCAP{ひらがな} 和 KEYCAP{カタカナ} 中的日文的意思: 前者表示平假名，
		后者表示片假名。这两个按键 <em>可能</em> 用于切换输入模式，它们是从 
		KEYCAP{カタカナ/ひらがな/ローマ字} ( CODE{KanaMode} )键中分离出来的专用按键。
		</div>
		

		最后，只有当相应的键与本规范其他地方给出的任何代 {{KeyboardEvent/code}} 
		值都不对应时，才应使用以下 {{KeyboardEvent/code}} 值。
		这个值适合虚拟键盘使用，
		因为多数虚拟键盘没有以与物理键盘上的键相对应的方式排列按键。

		BEGIN_CODE_TABLE special "特殊按键的 code 值表。"
		CODE Unidentified		当本规范中没有给出合适的其他码值时，应使用此码值。
		END_CODE_TABLE

		<p class="warning">
		当实现无法确定按键码值时，符合本规范的实现 
		<span class="zh-upper">必须</span> 只能使用 CODE{Unidentified} 作为按键码值。
		但仅使用(Exposing)该值 <span class="zh-upper">不得</span> 
		表明实现符合本规范。
		</p>

<h2 id="accessibility">无障碍</h2>

	这个规范简单地定义了一组可在 {{KeyboardEvent/code}} 属性中使用的有效值。
	因此，它没有引入任何具有无障碍问题的特性(feature)。
	
	<a href="https://w3c.github.io/apa/fast/checklist.html">FAST 清单</a> 已完成，
	本规范不适用其中任何内容。

	<div class="note custom-note">
	FAST: Framework for Accessibility in the Specification of Technologies，
	技术文档的无障碍框架。<q>FAST的目标是描述网络技术应提供的特性，
	以确保能够创建残疾用户可以访问的内容。完整的框架引入了对用户需求的分析，
	描述了技术、内容创作和用户代理如何协同工作以满足这些需求，
	并为技术开发人员提供了全面的指导。本清单(checklist)从高层次上提取这些信息，
	以帮助技术进行自我审查。
	规范开发人员可以利用本清单(checklist)
	来帮助自己: 确保技术能够解决无障碍倡导者在横向审查期间可能提出的特性。</q>
	—— <abbr 
	title="Framework for Accessibility in the Specification of Technologies">
	FAST</abbr> Checklist。
	</div>
	
	FAST清单的一个条目是: "如果技术提供国际化支持"。此条目与本规范相关: 
	本规范本质上为键盘定义了 {{KeyboardEvent/code}} 值，并提供了人类可读
	(human-readable)的名称(如"ShiftLeft"、"ControlRight"、"AltGr"或"KeyQ")。
	
	一些特殊按键的值被定义为人类可读(human-readable)的字符串，
	以便检测特殊键的代码更容易理解。虽然这些值并不打算直接暴露给用户
	(没有在键帽上显示)，但想要公开这些值无可厚非。
	选择公开这些值的应用程序需要确定: 为了显示而翻译这些字符串是否合适
	(例如: 为法国用户将"Backspace"显示为"Suppr.arrière")。

<h2 id="i18n">国际化(i18n)</h2>

	<a 
	href="https://www.w3.org/International/i18n-drafts/techniques/shortchecklist">
	简版的 I18n 清单</a> 已完成，清单中有一个条目需要进行说明:
	
	* <em>"描述一种格式或可能需要本地化的数据"</em>:
		本规范定义了不打算向用户显示的值，尽管没有什么可以阻止网站公开这些值。

	<div class="note custom-note">
	<q>在计算中，国际化和本地化( internationalization and localization，美国英语)
	或国际化和本地化(internationalisation and localisation，英国英语)，通常缩写为
	<strong>i18n</strong> 和 <strong>L10n</strong>，是使计算机软件适应不同语言、
	区域特性和目标地区的技术要求的方法。</q> —— 
	<a href="https://en.wikipedia.org/wiki/Internationalization_and_localization">
	I18n</a> <br/>
	</div>

	<div class="note custom-note" data-content="按键值的可读性和公开性: ">
	无论是上面的无障碍还是本节的国际化，在说明时都包含对一个角度的解释: 
	{{KeyboardEvent/code}} 值的可读性与公开性。
	本规范定义的按键值都是人类可读的英文，在应用程序不公开这些按键值时，
	不需要进行额外的国际化或无障碍适配，如果将这些按键值暴露给用户，
	则需要对此进行翻译(国际化)和无障碍适配了。
	</div>

<h2 id="security">安全注意事项</h2>

	<a href="https://www.w3.org/TR/security-privacy-questionnaire/">
	安全和隐私的自我审查问卷</a> 已完成，以下是对其中一些有关本规范条目的备注:
	
	* <em><a href="https://www.w3.org/TR/security-privacy-questionnaire/#purpose">
		2.1 此特性可能会向网站或其他方公开哪些信息，出于什么目的需要公开?</a></em> :
		本规范为各种按键事件的 {{KeyboardEvent/code}} 属性定义了一组有效值。
		这提供一种平台独立的(platform-independent)方式来识别(通过位置)
		按下了哪个物理键(例如，游戏中的 WASD 键)，非常有必要。

	* <em>
		<a 
		href=
		"https://www.w3.org/TR/security-privacy-questionnaire/#non-fully-active">
		2.17 您的功能是如何处理非"完全活动(fully active)"文档的?</a></em>:
		此属性仅与按键事件关联，如果文档未完全激活，则不会派发事件。

	[[UIEvents]] 规范中解决了与 {{KeyboardEvent/code}} 属性相关的安全问题。
	
<h2 id="privacy">隐私注意事项</h2>

	安全和隐私的自我审查问卷 已完成，以下是对其中一些有关本规范条目的备注:
	
	* <em><a href="https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data">
		2.6 规范中的特性是否向源(origins)公开了有关底层平台的信息?</a></em>:
		{{KeyboardEvent/code}} 属性包含用户按下的键的平台独立的"扫描码(scancode)"值。
		有一些特殊的 `码(code)` 值可以用来识别特定的键盘。例如， `IntlBackslash` 、
		`IntlRo` 和 `IntlYen` 。用户必须键入这些特性按键才能获取键信息。

	* <em><a href=
		"https://www.w3.org/TR/security-privacy-questionnaire/#legitimate-misuse">
		3.5 合法滥用(Legitimate Misuse)</a></em>: 一个站点可以捕获所有按键响应，
		并构建键盘生成的按键值的映射。如果用户键入了足够的按键值(并且没有更改键盘)，
		那么网站可以尝试将这些值与已知键盘布局的数据库进行匹配，
		以猜测用户当前的键盘布局。然而，这是对 {{KeyboardEvent/key}} 属性本身
		(在[[UIEvents]]规范中定义)的关注，而不是对本文档中定义的值( 
			{{KeyboardEvent/code}} )的关注。

	[[UIEvents]] 规范中解决了与 {{KeyboardEvent/code}} 属性相关的隐私问题。
	
<h2 id="acknowledgements-contributors">致谢</h2>

	非常感谢 WebApps 工作组的以下参与者在制定本规范的过程中提供了大量实质性贡献。

	Gary Kacmarcik (Google),
	Masayuki Nakano (Mozilla)

	
